{"version":3,"sources":["webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/css/index.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/css/react-table.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/css/react-table-hoc-fixed-columns.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/grid.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/PalettePicker.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/HTMLLegend.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/tooltip-content.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/utilities.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/ParallelCoordinatesController.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/shared.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/hierarchical.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/line.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/network.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/summary.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/xyplot.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/settings.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/charts/bar.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/docs/chart-docs.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/icons.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/components/IconButton.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/components/Toolbar.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/components/Viz.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/settings.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/VizControls.tsx","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/types.ts","webpack:////Users/captainsafia/github.com/nteract/nteract/packages/data-explorer/src/index.tsx"],"names":["css","styled_components_browser_esm","div","props","theme","ReactTableFixedColumns","lib_default","es","switchMode","currentMode","=",">","<","NumberFilter","filterState","filterName","updateFunction","onChange","mode","react","style","border","background","borderRadius","width","type","id","name","event","currentTarget","value","placeholder","onClick","[object Object]","numberFilterWrapper","filterNumbers","filter","row","filterValue","Number","columnFilters","integer","number","string","filterMethod","toLowerCase","indexOf","grid_DataResourceTransformGrid","super","this","state","filters","showFilters","data","schema","height","primaryKey","tableColumns","fields","map","field","Header","accessor","fixed","Filter","newFilter","setState","Object","assign","rowValue","toString","columns","className","filterable","defaultProps","metadata","grid","Wrapper","ColorPickerWrapper","PalettePickerWrapper","PaletteButton","button","PalettePicker_PalettePicker","openClose","open","colors","join","handleChange","color","position","selectedColor","selectedPosition","pickerChange","hex","updateColor","colorsFromTextarea","parsedTextValue","replace","split","updateTextArea","e","target","display","role","tabIndex","onKeyPress","keyCode","index","key","react_color_lib","onChangeComplete","href","d","src_PalettePicker","CircleSpan","span","LegendItemSpan","LegendWrapper","src_HTMLLegend","values","colorHash","valueHash","setColor","length","newColorArray","tooltip_content","attrs","transform","x","y","numeralFormatting","tickValue","format","numeral_default","NumberOfItemsP","p","ParCoordsAxisTickG","g","axisSize","ParallelCoordinatesController_ParallelCoordinatesController","brushing","selectedExtent","columnName","columnExtent","options","parallelizeResults","metrics","schemaFields","minmax","screenScales","forEach","metric","dataExtent","Math","min","datapoint","max","minMaxScale","src","domain","range","screenScale","dataPieces","dataPiece","rawvalue","pctvalue","push","scales","parallelizeData","filterMode","dataScales","reduce","metricHash","Infinity","chart","dim1","hiddenHash","Map","keys","extent","sort","a","b","set","additionalSettings","shownData","get","filteredData","Other","uniqueValues","valueReducer","find","uniqueValue","colorArray","afterElements","annotations","label","disable","coordinates","annotation","semiotic_lib","oAccessor","rAccessor","r","connectorType","columnDatapoint","fill","opacity","connectorStyle","stroke","source","strokeWidth","strokeOpacity","responsiveWidth","margin","top","left","right","bottom","oPadding","pixelColumnWidth","interaction","columnsBrush","during","pieceHoverAnnotation","tooltipContent","hoveredDatapoint","textColor","canvasPieces","canvasConnectors","oLabel","columnLabel","scale","size","orient","ticks","tickFormat","src_ParallelCoordinatesController","stringOrFnAccessor","sortByOrdinalRange","secondarySort","subsortData","subsortArrays","ordinalValue","array","ordinalAData","ordinalBData","ordinalData","combinedArray","parentPath","pathArray","parent","hierarchicalColor","depth","colorNode","d3_interpolate_src","lightenScale","fontScale","clamp","edgeStyles","force","edge","sankey","matrix","arc","weight","nodeStyles","node","nodeLinkHover","hoverAnnotationSettings","fillOpacity","nodeLabeling","none","static","scaled","nodeSize","textAnchor","fontSize","summary_fontScale","TooltipHeader","TooltipP","binHash","heatmap","hexbin","thresholds","semioticScatterplot","dimensions","trendLine","marginalGraphics","dim2","dim3","metric1","metric2","metric3","sizeScale","topQ","datapointA","datapointB","topSecondQ","combinedAnnotations","combinedHash","topDatapoint","hashD","newCoordinates","combineTopAnnotations","undefined","dataMin","dataMax","sortedData","uniqueArray","uniqueDim","dimValue","areas","calculatedAreas","summaryType","bins","thresholdSteps","thresholdValue","floor","binMax","thresholdArray","withZeroThresholdSteps","hexValues","nextValue","thresholdColors","hexHash","binLabel","multiclassHash","renderInCanvas","calculatedSummaryType","marginalGraphicsAxes","tickLineGenerator","marginalSummaryType","showPoints","regressionType","xyPlotSettings","xAccessor","yAccessor","axes","baseline","tickSize","footer","points","canvasPoints","summaryStyle","areaDatapoint","binItems","parentSummary","pointStyle","hoverAnnotation","annotationSettings","layout","marginOffset","binnedDatapoint","dim","pkey","semioticSettings","line","Frame","controls","chartGenerator","lineData","selectedMetrics","lineType","timeseriesSort","timeSeriesFields","sortType","formatting","toLocaleString","xScale","canvasRender","metricData","datapointValue","originalData","some","selectedMetric","interpolator","d3_shape_src","lines","xScaleType","canvasLines","renderKey","lineStyle","point","rotation","showLinePoints","legend","title","legendGroups","styleFn","legendItem","items","parentLine","scatter","areaType","bar","selectedDimensions","barGrouping","metric4","selectedDim","errorBarAnnotations","dynamicColumnWidth","rExtent","i","xy","errorBarSize","abs","rScale","negative","y1","y2","x1","x2","uniques","uniqueDimName","combinedOptions","heightMax","flexWrap","minWidth","fontWeight","uniqueDimValues","dimName","customMark","axis","column","xyData","pieces","piece","total","baseMarkProps","forceUpdate","summary","amplitude","projection","summaryDatapoint","pieceDatapoint","network","networkType","sourceDimension","targetDimension","networkLabel","edgeHash","networkData","edges","edgeType","edgeStyle","nodeStyle","nodeSizeAccessor","degree","iterations","hoveredNode","nodeLabels","hierarchy","hierarchyType","baseHierarchyType","nestingParams","d3_collection_src","param","sanitizedData","sanitizedR","entries","hierarchySum","hierarchyChildren","padding","edgeRenderKey","pathString","content","children","hierarchicalTooltip","parallel","chartHelpText","controlHelpText","default","lineDimensions","IconPath","path","BoxplotIcon","octicons_src","viewBox","outerProps","TreeIcon","NetworkIcon","ScatterplotIcon","LineChartIcon","HexbinIcon","BarChartIcon","ParallelCoordinatesIcon","baseButtonStyle","BaseButton","SelectedButton","IconButton_IconButton","message","selected","WhichButton","ToolbarWrapper","Toolbar","setGrid","setView","currentView","componentType","largeDataset","FlexItem","Viz","displayName","settings_colors","commonCSS","ControlWrapper","VizControls_Wrapper","metricDimSelector","selectionFunction","required","selectedValue","contextTooltip","metricsList","displayMetrics","metricName","aria-selected","availableLineTypes","availableAreaTypes","VizControls","view","updateChart","setLineType","updateMetrics","updateDimensions","setAreaType","metricNames","dimensionNames","updateChartGenerator","chartProperty","metricOrDim","getControlHelpText","mOrD","views","selectedBarGrouping","selectedMarginalGraphics","selectedRegressionType","selectedNetworkType","selectedHierarchyType","selectedSummaryType","lineTypeOption","areaTypeOption","areaTypeOptionType","nestingDimensions","barDimensions","defaultPrimaryKey","__webpack_require__","__webpack_exports__","src_DataExplorer","mediaType","generateChartKey","pieceType","JSON","stringify","defaultResponsiveSize","MetadataWarningWrapper","MetadataWarningContent","MetadataWarning","warning","sampled","FlexWrapper","SemioticWrapper","updatedState","stateData","initialView","chartKey","frameSettings","updateMetadata","prevState","displayChart","overrideProps","onMetadataChange","dx","selectedLineType","selectedAreaType","selectedDimension","oldDims","newDimensions","dimension","oldMetrics","newMetrics","cardinality","datapointIndex","mappedDatapoint","Date","cardinalityHash","includes","child","newProps","toolbarProps","MIMETYPE","DataExplorerDefault"],"mappings":"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","file":"tabular-dataresource-fccde53340123592ec0d.bundle.js","sourcesContent":["import styled from \"styled-components\";\n\nimport reactTableStyles from \"./react-table\";\nimport reactTableFixedColumnStyles from \"./react-table-hoc-fixed-columns\";\n\ninterface ThemeProps {\n  theme: string | undefined;\n}\n\nexport default styled.div<ThemeProps>`\n  /* React table style customization */\n  width: 100%;\n\n  .ReactTable .rt-thead.-header .rt-th {\n    color: ${props => (props.theme === \"dark\" ? \"#bbb\" : \"#111\")};\n    background-color: ${props => (props.theme === \"dark\" ? \"#1e1e1e\" : \"#fff\")};\n  }\n  .ReactTable.-striped .rt-tr.-odd > div {\n    color: ${props => (props.theme === \"dark\" ? \"#bbb\" : \"#111\")};\n    background-color: ${props => (props.theme === \"dark\" ? \"#1e1e1e\" : \"#fff\")};\n  }\n\n  .ReactTable.-striped .rt-tr.-even > div {\n    color: ${props => (props.theme === \"dark\" ? \"#bbb\" : \"#111\")};\n    background-color: ${props => (props.theme === \"dark\" ? \"#111\" : \"#bbb\")};\n  }\n\n  .ReactTable.-highlight .rt-tbody .rt-tr:not(.-padRow):hover {\n    /* \n    What does this selector do? \n    These classes were in our react-table style sheet previously\n    color: var(--theme-app-fg);\n    background: var(--cm-background); \n    */\n  }\n\n  .ReactTable .-pagination .-btn {\n  }\n\n  /* \n  These parts are mostly copied from the dependency packages, \n  but we remove some things that clash with us\n  */\n  ${reactTableStyles}\n  ${reactTableFixedColumnStyles}\n`;\n","// just a string copy/paste for now\n/*  'react-table@6.8.6' vendorized css */\n/* 'react-table/react-table.css' */\n// this will be merged with other styles and combined into one styled-component\n\nexport default `\n  \n  .ReactTable {\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n  }\n  .ReactTable * {\n    box-sizing: border-box;\n  }\n  .ReactTable .rt-table {\n    -webkit-box-flex: 1;\n    -ms-flex: auto 1;\n    flex: auto 1;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-box-align: stretch;\n    -ms-flex-align: stretch;\n    align-items: stretch;\n    width: 100%;\n    border-collapse: collapse;\n    overflow: auto;\n  }\n  .ReactTable .rt-thead {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  .ReactTable .rt-thead.-headerGroups {\n    background: rgba(0, 0, 0, 0.03);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n  .ReactTable .rt-thead.-filters {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n  .ReactTable .rt-thead.-filters input,\n  .ReactTable .rt-thead.-filters select {\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    background: #fff;\n    padding: 5px 7px;\n    font-size: inherit;\n    border-radius: 3px;\n    font-weight: normal;\n    outline: none;\n  }\n  .ReactTable .rt-thead.-filters .rt-th {\n    border-right: 1px solid rgba(0, 0, 0, 0.02);\n  }\n  .ReactTable .rt-thead.-header {\n    box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.15);\n  }\n  .ReactTable .rt-thead .rt-tr {\n    text-align: center;\n  }\n  .ReactTable .rt-thead .rt-th,\n  .ReactTable .rt-thead .rt-td {\n    padding: 5px 5px;\n    line-height: normal;\n    position: relative;\n    border-right: 1px solid rgba(0, 0, 0, 0.05);\n    transition: box-shadow 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    box-shadow: inset 0 0 0 0 transparent;\n  }\n  .ReactTable .rt-thead .rt-th.-sort-asc,\n  .ReactTable .rt-thead .rt-td.-sort-asc {\n    box-shadow: inset 0 3px 0 0 rgba(0, 0, 0, 0.6);\n  }\n  .ReactTable .rt-thead .rt-th.-sort-desc,\n  .ReactTable .rt-thead .rt-td.-sort-desc {\n    box-shadow: inset 0 -3px 0 0 rgba(0, 0, 0, 0.6);\n  }\n  .ReactTable .rt-thead .rt-th.-cursor-pointer,\n  .ReactTable .rt-thead .rt-td.-cursor-pointer {\n    cursor: pointer;\n  }\n  .ReactTable .rt-thead .rt-th:last-child,\n  .ReactTable .rt-thead .rt-td:last-child {\n    border-right: 0;\n  }\n  .ReactTable .rt-thead .rt-resizable-header {\n    overflow: visible;\n  }\n  .ReactTable .rt-thead .rt-resizable-header:last-child {\n    overflow: hidden;\n  }\n  .ReactTable .rt-thead .rt-resizable-header-content {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .ReactTable .rt-thead .rt-header-pivot {\n    border-right-color: #f7f7f7;\n  }\n  .ReactTable .rt-thead .rt-header-pivot:after,\n  .ReactTable .rt-thead .rt-header-pivot:before {\n    left: 100%;\n    top: 50%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n  }\n  .ReactTable .rt-thead .rt-header-pivot:after {\n    border-color: rgba(255, 255, 255, 0);\n    border-left-color: #fff;\n    border-width: 8px;\n    margin-top: -8px;\n  }\n  .ReactTable .rt-thead .rt-header-pivot:before {\n    border-color: rgba(102, 102, 102, 0);\n    border-left-color: #f7f7f7;\n    border-width: 10px;\n    margin-top: -10px;\n  }\n  .ReactTable .rt-tbody {\n    -webkit-box-flex: 99999;\n    -ms-flex: 99999 1 auto;\n    flex: 99999 1 auto;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    overflow: auto;\n  }\n  .ReactTable .rt-tbody .rt-tr-group {\n    border-bottom: solid 1px rgba(0, 0, 0, 0.05);\n  }\n  .ReactTable .rt-tbody .rt-tr-group:last-child {\n    border-bottom: 0;\n  }\n  .ReactTable .rt-tbody .rt-td {\n    border-right: 1px solid rgba(0, 0, 0, 0.02);\n  }\n  .ReactTable .rt-tbody .rt-td:last-child {\n    border-right: 0;\n  }\n  .ReactTable .rt-tbody .rt-expandable {\n    cursor: pointer;\n    text-overflow: clip;\n  }\n  .ReactTable .rt-tr-group {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-box-align: stretch;\n    -ms-flex-align: stretch;\n    align-items: stretch;\n  }\n  .ReactTable .rt-tr {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n    display: -webkit-inline-box;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n  }\n  .ReactTable .rt-th,\n  .ReactTable .rt-td {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 0px;\n    flex: 1 0 0;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    padding: 7px 5px;\n    overflow: hidden;\n    transition: 0.3s ease;\n    transition-property: width, min-width, padding, opacity;\n  }\n  .ReactTable .rt-th.-hidden,\n  .ReactTable .rt-td.-hidden {\n    width: 0 !important;\n    min-width: 0 !important;\n    padding: 0 !important;\n    border: 0 !important;\n    opacity: 0 !important;\n  }\n  .ReactTable .rt-expander {\n    display: inline-block;\n    position: relative;\n    margin: 0;\n    color: transparent;\n    margin: 0 10px;\n  }\n  .ReactTable .rt-expander:after {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    top: 50%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%) rotate(-90deg);\n    transform: translate(-50%, -50%) rotate(-90deg);\n    border-left: 5.04px solid transparent;\n    border-right: 5.04px solid transparent;\n    border-top: 7px solid rgba(0, 0, 0, 0.8);\n    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    cursor: pointer;\n  }\n  .ReactTable .rt-expander.-open:after {\n    -webkit-transform: translate(-50%, -50%) rotate(0);\n    transform: translate(-50%, -50%) rotate(0);\n  }\n  .ReactTable .rt-resizer {\n    display: inline-block;\n    position: absolute;\n    width: 36px;\n    top: 0;\n    bottom: 0;\n    right: -18px;\n    cursor: col-resize;\n    z-index: 10;\n  }\n  .ReactTable .rt-tfoot {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    box-shadow: 0 0 15px 0 rgba(0, 0, 0, 0.15);\n  }\n  .ReactTable .rt-tfoot .rt-td {\n    border-right: 1px solid rgba(0, 0, 0, 0.05);\n  }\n  .ReactTable .rt-tfoot .rt-td:last-child {\n    border-right: 0;\n  }\n  .ReactTable.-highlight .rt-tbody .rt-tr:not(.-padRow):hover {\n    background: rgba(0, 0, 0, 0.05);\n  }\n  .ReactTable .-pagination {\n    z-index: 1;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    -webkit-box-align: stretch;\n    -ms-flex-align: stretch;\n    align-items: stretch;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    padding: 3px;\n    box-shadow: 0 0 15px 0 rgba(0, 0, 0, 0.1);\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n  .ReactTable .-pagination input,\n  .ReactTable .-pagination select {\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    background: #fff;\n    padding: 5px 7px;\n    font-size: inherit;\n    border-radius: 3px;\n    font-weight: normal;\n    outline: none;\n  }\n  .ReactTable .-pagination .-btn {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    display: block;\n    width: 100%;\n    height: 100%;\n    border: 0;\n    border-radius: 3px;\n    padding: 6px;\n    font-size: 1em;\n    transition: all 0.1s ease;\n    cursor: pointer;\n    outline: none;\n  }\n  .ReactTable .-pagination .-btn[disabled] {\n    opacity: 0.5;\n    cursor: default;\n  }\n  .ReactTable .-pagination .-btn:not([disabled]):hover {\n    background: rgba(0, 0, 0, 0.3);\n    color: #fff;\n  }\n  .ReactTable .-pagination .-previous,\n  .ReactTable .-pagination .-next {\n    -webkit-box-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n    text-align: center;\n  }\n  .ReactTable .-pagination .-center {\n    -webkit-box-flex: 1.5;\n    -ms-flex: 1.5;\n    flex: 1.5;\n    text-align: center;\n    margin-bottom: 0;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n  .ReactTable .-pagination .-pageInfo {\n    display: inline-block;\n    margin: 3px 10px;\n    white-space: nowrap;\n  }\n  .ReactTable .-pagination .-pageJump {\n    display: inline-block;\n  }\n  .ReactTable .-pagination .-pageJump input {\n    width: 70px;\n    text-align: center;\n  }\n  .ReactTable .-pagination .-pageSizeOptions {\n    margin: 3px 10px;\n  }\n  .ReactTable .rt-noData {\n    display: block;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    -webkit-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n    background: rgba(255, 255, 255, 0.8);\n    transition: all 0.3s ease;\n    z-index: 1;\n    pointer-events: none;\n    padding: 20px;\n    color: rgba(0, 0, 0, 0.5);\n  }\n  .ReactTable .-loading {\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    background: rgba(255, 255, 255, 0.8);\n    transition: all 0.3s ease;\n    z-index: -1;\n    opacity: 0;\n    pointer-events: none;\n  }\n  .ReactTable .-loading > div {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    top: 50%;\n    left: 0;\n    font-size: 15px;\n    color: rgba(0, 0, 0, 0.6);\n    -webkit-transform: translateY(-52%);\n    transform: translateY(-52%);\n    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n  .ReactTable .-loading.-active {\n    opacity: 1;\n    z-index: 2;\n    pointer-events: all;\n  }\n  .ReactTable .-loading.-active > div {\n    -webkit-transform: translateY(50%);\n    transform: translateY(50%);\n  }\n  .ReactTable .rt-resizing .rt-th,\n  .ReactTable .rt-resizing .rt-td {\n    transition: none !important;\n    cursor: col-resize;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n`;\n","// just a string copy/paste for now:\n/*  \n'react-table-hoc-fixed-columns@6.8.6' vendorized css\n'react-table-hoc-fixed-columns/lib/styles.css'\n*/\n// to be merged with react-table styles and combined into one styled-component\n\nexport default `\n\n  .rthfc .rt-thead.-headerGroups,\n  .rthfc .rt-thead.-header {\n    z-index: 3;\n  }\n\n  .rthfc .rt-thead.-filters {\n    z-index: 2;\n  }\n\n  .rthfc .rt-th,\n  .rthfc .rt-td {\n    \n  }\n\n  .rthfc .-headerGroups .rt-th {\n    \n  }\n\n  .rthfc.-striped .rt-tr.-odd .rt-td {\n    \n  }\n\n  .rthfc.-highlight .rt-tr:hover .rt-td {\n    \n  }\n\n  .rthfc .-filters .rt-th.rthfc-th-fixed-left-last,\n  .rthfc .rt-th.rthfc-th-fixed-left-last,\n  .rthfc .rt-td.rthfc-td-fixed-left-last {\n    border-right: solid 1px;\n  }\n\n  .rthfc .rt-th.rthfc-th-fixed-right-first,\n  .rthfc .rt-td.rthfc-td-fixed-right-first {\n    border-left: solid 1px;\n  }\n\n  /*------------ Sticky position version: -sp ------------*/\n\n  .rthfc.-sp .rt-tbody {\n    overflow: visible;\n    flex: 1 0 auto;\n  }\n\n  .rthfc.-sp .rt-thead {\n    position: -webkit-sticky;\n    position: sticky;\n  }\n\n  .rthfc.-sp .rt-thead.-headerGroups {\n    \n  }\n\n  .rthfc.-sp .rt-tfoot {\n    position: -webkit-sticky;\n    position: sticky;\n    z-index: 1;\n    bottom: 0px;\n  }\n\n  .rthfc.-sp .rthfc-th-fixed,\n  .rthfc.-sp .rthfc-td-fixed {\n    position: -webkit-sticky;\n    position: sticky;\n    z-index: 1;\n  }\n\n  .rthfc.-sp .rthfc-th-fixed-left,\n  .rthfc.-sp .rthfc-td-fixed-left {\n    left: 0;\n  }\n\n  .rthfc.-sp .rthfc-th-fixed-right,\n  .rthfc.-sp .rthfc-td-fixed-right {\n    left: 0;\n  }\n\n  /*------------ scroll event version: -se ------------*/\n\n  .rthfc.-se .-header .rt-th.rthfc-th-fixed,\n  .rthfc.-se .-headerGroups .rt-th.rthfc-th-fixed,\n  .rthfc.-se .-filters .rt-th.rthfc-th-fixed,\n  .rthfc.-se .rt-td.rthfc-td-fixed {\n    position: relative;\n    z-index: 1;\n  }\n`;\n","import * as React from \"react\";\nimport ReactTable from \"react-table\";\nimport withFixedColumns from \"react-table-hoc-fixed-columns\";\n\nimport CustomReactTableStyles from \"../css/\";\nimport * as Dx from \"../types\";\n\nimport styled from \"styled-components\";\n\nconst ReactTableFixedColumns = withFixedColumns(ReactTable);\n\nconst switchMode = (currentMode: string) => {\n  const nextMode: Dx.JSONObject = {\n    \"=\": \">\",\n    \">\": \"<\",\n    \"<\": \"=\"\n  };\n  return nextMode[currentMode];\n};\n\ntype OnChangeProps = (input: number | string) => void;\n\ntype FilterIndexSignature = \"integer\" | \"number\" | \"string\";\n\ninterface NumberFilterProps {\n  onChange: OnChangeProps;\n  filterState: { [key: string]: string };\n  filterName: string;\n  updateFunction: (input: Dx.JSONObject) => void;\n}\n\nconst NumberFilter = (props: NumberFilterProps) => {\n  const { filterState, filterName, updateFunction, onChange } = props;\n  const mode = filterState[filterName] || \"=\";\n\n  return (\n    <form\n      style={{\n        border: \"1px solid gray\",\n        background: \"white\",\n        borderRadius: \"5px\",\n        width: \"100%\"\n      }}\n    >\n      <input\n        type=\"text\"\n        id=\"name\"\n        name=\"user_name\"\n        style={{ width: \"calc(100% - 30px)\", border: \"none\" }}\n        onChange={(event: React.FormEvent<HTMLInputElement>) => {\n          onChange(event.currentTarget.value);\n        }}\n        placeholder=\"number\"\n      />\n      <button\n        onClick={() => {\n          updateFunction({ [filterName]: switchMode(mode) });\n        }}\n      >\n        {mode}\n      </button>\n    </form>\n  );\n};\n\nconst stringFilter = () => ({ onChange }: { onChange: OnChangeProps }) => (\n  <form>\n    <input\n      type=\"text\"\n      id=\"string-filter\"\n      name=\"string-filter\"\n      onChange={(event: React.FormEvent<HTMLInputElement>) => {\n        onChange(event.currentTarget.value);\n      }}\n      placeholder=\"string\"\n    />\n  </form>\n);\n\nconst numberFilterWrapper = (\n  filterState: NumberFilterProps[\"filterState\"],\n  filterName: NumberFilterProps[\"filterName\"],\n  updateFunction: NumberFilterProps[\"updateFunction\"]\n) => ({ onChange }: { onChange: OnChangeProps }) => (\n  <NumberFilter\n    onChange={onChange}\n    filterState={filterState}\n    filterName={filterName}\n    updateFunction={updateFunction}\n  />\n);\n\nconst filterNumbers = (mode = \"=\") => (\n  filter: FilterObject,\n  row: NumberRowObject\n) => {\n  const filterValue = Number(filter.value);\n  if (mode === \"=\") {\n    return row[filter.id] === filterValue;\n  } else if (mode === \"<\") {\n    return row[filter.id] < filterValue;\n  } else if (mode === \">\") {\n    return row[filter.id] > filterValue;\n  }\n  return row[filter.id];\n};\n\nconst filterStrings = () => (filter: FilterObject, row: StringRowObject) => {\n  return (\n    row[filter.id].toLowerCase().indexOf(filter.value.toLowerCase()) !== -1\n  );\n};\n\ntype FilterMethodType = { [index in FilterIndexSignature]: Function };\n\nconst columnFilters: FilterMethodType = {\n  integer: numberFilterWrapper,\n  number: numberFilterWrapper,\n  string: stringFilter\n};\n\nconst filterMethod: FilterMethodType = {\n  integer: filterNumbers,\n  number: filterNumbers,\n  string: filterStrings\n};\n\ninterface FilterObject {\n  id: string;\n  value: string;\n}\n\ninterface StringRowObject {\n  [key: string]: string;\n}\n\ninterface NumberRowObject {\n  [key: string]: number;\n}\n\ninterface State {\n  filters: { [key: string]: Function };\n  showFilters: boolean;\n}\n\ninterface Props {\n  data: { data: Dx.Datapoint[]; schema: Dx.Schema };\n  height: number;\n  theme?: string;\n}\n\nclass DataResourceTransformGrid extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    metadata: {},\n    height: 500\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      filters: {},\n      showFilters: false\n    };\n  }\n\n  render() {\n    const {\n      data: { data, schema },\n      height,\n      theme\n    } = this.props;\n\n    const { filters, showFilters } = this.state;\n\n    const { primaryKey = [] } = schema;\n\n    const tableColumns = schema.fields.map((field: Dx.Field) => {\n      if (\n        field.type === \"string\" ||\n        field.type === \"number\" ||\n        field.type === \"integer\"\n      ) {\n        return {\n          Header: field.name,\n          accessor: field.name,\n          fixed: primaryKey.indexOf(field.name) !== -1 && \"left\",\n          filterMethod: (filter: Dx.JSONObject, row: Dx.JSONObject) => {\n            if (\n              field.type === \"string\" ||\n              field.type === \"number\" ||\n              field.type === \"integer\"\n            ) {\n              return filterMethod[field.type](filters[field.name])(filter, row);\n            }\n          },\n          // If we don't have a filter defined for this field type, pass an empty div\n          Filter: columnFilters[field.type](\n            filters,\n            field.name,\n            (newFilter: { [key: string]: Function }) => {\n              this.setState({ filters: { ...filters, ...newFilter } });\n            }\n          )\n        };\n      } else {\n        return {\n          Header: field.name,\n          id: field.name,\n          accessor: (rowValue:{ [key: string]: any }) => {\n            return field.type === \"boolean\" ? rowValue[field.name].toString() : rowValue[field.name]},\n          fixed: primaryKey.indexOf(field.name) !== -1 && \"left\"\n        };\n      }\n    });\n\n    return (\n      <CustomReactTableStyles theme={theme}>\n        <button\n          //          icon=\"filter\"\n          onClick={() => this.setState({ showFilters: !showFilters })}\n        >\n          {showFilters ? \"Hide\" : \"Show\"} Filters\n        </button>\n        <ReactTableFixedColumns\n          data={data}\n          columns={tableColumns}\n          style={{\n            height: `${height}px`\n          }}\n          className=\"-striped -highlight\"\n          filterable={showFilters}\n        />\n      </CustomReactTableStyles>\n    );\n  }\n}\n\nexport default DataResourceTransformGrid;\n","import * as React from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  colors: string[];\n  updateColor: (colors: string[]) => void;\n}\n\ninterface State {\n  colors: string;\n  selectedColor: string;\n  open: boolean;\n  selectedPosition: number;\n}\n\n// NOTE: These styles could be extracted for each of the components used within.\n//       In order to get this typescript & styled-components transition in place though,\n//       For now this just matches the prior style structure exactly with one big wrapper\n//       and one extracted component -- <PaletteButton />\nconst Wrapper = styled.div`\n  & {\n    margin: 30px 0;\n    padding: 30px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    position: relative;\n  }\n  .close {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    cursor: pointer;\n    opacity: 0.5;\n    font-size: 40px;\n    line-height: 22px;\n  }\n  .close:hover {\n    opacity: 1;\n  }\n  .grid-wrapper {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n  }\n  h3 {\n    margin: 0 0 20px;\n  }\n  .box {\n    cursor: pointer;\n    width: 30px;\n    height: 30px;\n    border-radius: 5px;\n    display: inline-block;\n    margin: 0 20px 20px 0;\n  }\n  textarea {\n    height: 184px;\n    width: 100%;\n    box-sizing: border-box;\n    margin-bottom: 20px;\n    padding: 5px;\n    font-size: 14px;\n    border-color: #ccc;\n  }\n`;\n\nconst ColorPickerWrapper = styled.div`\n   {\n    width: 225px;\n  }\n`;\n\nconst PalettePickerWrapper = styled.div`\n   {\n    margin-top: 30px;\n  }\n`;\n\nconst PaletteButton = styled.button`\n  & {\n    margin: 0 20px 10px 0;\n    -webkit-appearance: none;\n    padding: 5px 15px;\n    background: white;\n    border: 1px solid #bbb;\n    border-radius: 3px;\n    cursor: pointer;\n    text-transform: uppercase;\n    font-size: 14px;\n    color: #555;\n  }\n  &:hover {\n    border-color: #888;\n    color: #222;\n  }\n`;\n\nclass PalettePicker extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    metadata: {},\n    height: 500\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedColor: props.colors[0],\n      selectedPosition: 0,\n      colors: props.colors.join(\",\\n\")\n    };\n  }\n\n  openClose = () => {\n    this.setState({\n      open: !this.state.open,\n      colors: this.props.colors.join(\",\\n\")\n    });\n  };\n\n  handleChange = (color: string, position: number) => {\n    this.setState({ selectedColor: color, selectedPosition: position });\n  };\n\n  pickerChange = (color: { hex: string }) => {\n    const { colors } = this.props;\n    colors[this.state.selectedPosition] = color.hex;\n    this.props.updateColor(colors);\n    this.setState({ selectedColor: color.hex, colors: colors.join(\",\\n\") });\n  };\n\n  colorsFromTextarea = () => {\n    const parsedTextValue = this.state.colors\n      .replace(/\\\"/g, \"\")\n      .replace(/ /g, \"\")\n      .replace(/\\[/g, \"\")\n      .replace(/\\]/g, \"\")\n      .replace(/\\r?\\n|\\r/g, \"\")\n      .split(\",\");\n\n    this.props.updateColor(parsedTextValue);\n  };\n\n  updateTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ colors: e.target.value });\n  };\n\n  render() {\n    if (!this.state.open) {\n      return (\n        <div style={{ display: \"inline-block\" }}>\n          <PaletteButton onClick={this.openClose}>Adjust Palette</PaletteButton>\n        </div>\n      );\n    }\n\n    const { colors } = this.props;\n\n    return (\n      <Wrapper>\n        <div\n          className=\"close\"\n          role=\"button\"\n          tabIndex={0}\n          onClick={this.openClose}\n          onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\n            if (e.keyCode === 13) {\n              this.openClose();\n            }\n          }}\n        >\n          ×\n        </div>\n        <div className=\"grid-wrapper\">\n          <div>\n            <h3>Select Color</h3>\n            {colors.map((color, index) => (\n              <div\n                key={`color-${index}`}\n                className=\"box\"\n                style={{ background: color }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\n                  if (e.keyCode === 13) {\n                    this.handleChange(color, index);\n                  }\n                }}\n                onClick={() => this.handleChange(color, index)}\n              />\n            ))}\n          </div>\n          <div>\n            <h3>Adjust Color</h3>\n            <ColorPickerWrapper>\n              <ChromePicker\n                color={this.state.selectedColor}\n                onChangeComplete={this.pickerChange}\n              />\n            </ColorPickerWrapper>\n          </div>\n          <div>\n            <h3>Paste New Colors</h3>\n            <textarea\n              value={this.state.colors}\n              onChange={this.updateTextArea}\n            />\n            <PaletteButton onClick={this.colorsFromTextarea}>\n              Update Colors\n            </PaletteButton>\n          </div>\n        </div>\n        <PalettePickerWrapper>\n          <a\n            href={`http://projects.susielu.com/viz-palette?colors=[${colors\n              .map(d => `\"${d}\"`)\n              .join(\",\")}]&backgroundColor=\"white\"&fontColor=\"black\"`}\n          >\n            Evaluate This Palette with VIZ PALETTE\n          </a>\n        </PalettePickerWrapper>\n      </Wrapper>\n    );\n  }\n}\n\nexport default PalettePicker;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport PalettePicker from \"./PalettePicker\";\n\ninterface HTMLLegendProps {\n  values: string[];\n  colorHash: { [index: string]: string };\n  valueHash: { [index: string]: number };\n  colors?: string[];\n  setColor: (color: string[]) => void;\n}\n\nconst CircleSpan = styled.span`\n  & {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    margin-right: 5px;\n    border-radius: 20px;\n    margin-bottom: -5px;\n  }\n`;\n\nconst LegendItemSpan = styled.span`\n  & {\n    display: inline-block;\n    min-width: 80px;\n    margin: 5px;\n  }\n`;\n\nconst LegendWrapper = styled.div`\n  & {\n    margin-top: 20px;\n  }\n`;\n\nconst HTMLLegend = ({\n  values,\n  colorHash,\n  valueHash,\n  colors = [],\n  setColor\n}: HTMLLegendProps) => {\n  const updateColorFn: (newColorArray: string[]) => void = (\n    newColorArray: string[]\n  ) => {\n    setColor(newColorArray);\n  };\n  return (\n    <LegendWrapper>\n      {(values.length > 18\n        ? // limit the displayed values to the top 18 and bin everything else into Other\n          [...values.filter((d, index) => index < 18), \"Other\"]\n        : values\n      ).map(\n        (value, index) =>\n          colorHash[value] && (\n            <LegendItemSpan key={`legend-item-${index}`}>\n              <CircleSpan\n                style={{\n                  background: colorHash[value]\n                }}\n              />\n              <span className=\"html-legend-item\">{value}</span>\n              {(valueHash[value] &&\n                valueHash[value] > 1 &&\n                `(${valueHash[value]})`) ||\n                \"\"}\n            </LegendItemSpan>\n          )\n      )}\n      {setColor && (\n        <PalettePicker colors={colors} updateColor={updateColorFn} />\n      )}\n    </LegendWrapper>\n  );\n};\n\nexport default HTMLLegend;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\n\ninterface Props {\n  x: number;\n  y: number;\n}\n\n// A little \"mixin\" for picking the :before on a tooltip\nconst beforeContent = (props: Props) => {\n  if (props.x < 200) {\n    return null;\n  }\n  if (props.y < 200) {\n    return `\n      border-left: inherit;\n      border-top: inherit;\n      top: -8px;\n      left: calc(50% - 15px);\n      background: inherit;\n      content: \"\";\n      padding: 0px;\n      transform: rotate(45deg);\n      width: 15px;\n      height: 15px;\n      position: absolute;\n      z-index: 99;\n    `;\n  }\n\n  return `\n    border-right: inherit;\n    border-bottom: inherit;\n    bottom: -8px;\n    left: calc(50% - 15px);\n    background: inherit;\n    content: \"\";\n    padding: 0px;\n    transform: rotate(45deg);\n    width: 15px;\n    height: 15px;\n    position: absolute;\n    z-index: 99;\n  `;\n};\n\nconst TooltipContent = styled.div.attrs((props: Props) => ({\n  style: {\n    transform: `translate(\n      ${props.x < 200 ? \"0px\" : \"calc(-50% + 7px)\"},\n      ${props.y < 200 ? \"10px\" : \"calc(-100% - 10px)\"}\n    )`\n  }\n}))`\n  color: black;\n  padding: 10px;\n  z-index: 999999;\n  min-width: 120px;\n  background: white;\n  border: 1px solid #888;\n  border-radius: 5px;\n  position: relative;\n\n  & p {\n    font-size: 14px;\n  }\n\n  & h3 {\n    margin: 0 0 10px;\n  }\n\n  &:before {\n    ${beforeContent}\n  }\n`;\nexport default TooltipContent;\n","import numeral from \"numeral\";\n\nexport function numeralFormatting(tickValue: number): string {\n  let format = \"0.[00]a\";\n  if (tickValue === 0) {\n    return \"0\";\n  } else if (tickValue > 100000000000000 || tickValue < 0.00001) {\n    format = \"0.[000]e+0\";\n  } else if (tickValue < 1) {\n    format = \"0.[0000]a\";\n  }\n  return numeral(tickValue).format(format);\n}\n\nexport function createLabelItems(uniqueValues: string[]): any[] {\n  return uniqueValues.map(value => ({ label: value }));\n}\n","import { scaleLinear, ScaleLinear } from \"d3-scale\";\nimport * as React from \"react\";\nimport { Axis, ResponsiveOrdinalFrame } from \"semiotic\";\n\nimport HTMLLegend from \"./HTMLLegend\";\n\nimport TooltipContent from \"./tooltip-content\";\nimport { numeralFormatting } from \"./utilities\";\n\nimport * as Dx from \"./types\";\n\nimport styled from \"styled-components\";\n\ninterface State {\n  filterMode: boolean;\n  data: object[];\n  dataScales: { [index: string]: ScaleLinear<number, number> };\n  columnExtent: { [index: string]: number[] };\n}\n\ninterface ParallelCoordinateOptions {\n  primaryKey: string[];\n  metrics: Dx.Metric[];\n  chart: Dx.Chart;\n  colors: Dx.ChartOptions[\"colors\"];\n  setColor: Dx.ChartOptions[\"setColor\"];\n}\n\ninterface Props {\n  data: Dx.DataProps[\"data\"];\n  schema: Dx.DataProps[\"schema\"];\n  options: ParallelCoordinateOptions;\n}\n\nconst NumberOfItemsP = styled.p`\n  margin: 20px 0 5px;\n`;\n\nconst ParCoordsAxisTickG = styled.g`\n  & text {\n    text-anchor: end;\n  }\n\n  & :first-child {\n    fill: white;\n    stroke: white;\n    opacity: 0.75;\n    stroke-width: 2;\n  }\n`;\n\nconst axisSize = [40, 380];\n\nfunction parallelizeData(\n  data: Dx.Datapoint[],\n  metrics: Dx.Metric[],\n  schemaFields: Dx.Field[],\n  primaryKey: string[]\n) {\n  const minmax: { [index: string]: ScaleLinear<number, number> } = {};\n  const screenScales: { [index: string]: ScaleLinear<number, number> } = {};\n\n  metrics.forEach(metric => {\n    const dataExtent = [\n      Math.min(...data.map(datapoint => datapoint[metric.name])),\n      Math.max(...data.map(datapoint => datapoint[metric.name]))\n    ];\n\n    const minMaxScale = scaleLinear()\n      .domain(dataExtent)\n      .range([0, 1]);\n    minmax[metric.name] = minMaxScale;\n\n    const screenScale = scaleLinear()\n      .domain(dataExtent)\n      .range([380, 0]);\n\n    screenScales[metric.name] = screenScale;\n  });\n\n  const dataPieces: Dx.Datapoint[] = [];\n  data.forEach(datapoint => {\n    metrics.forEach(metric => {\n      const dataPiece: Dx.Datapoint = {\n        metric: metric.name,\n        rawvalue: datapoint[metric.name],\n        pctvalue: minmax[metric.name](datapoint[metric.name])\n      };\n      schemaFields.forEach((field: { type: string; name: string }) => {\n        if (field.type === \"string\") {\n          dataPiece[field.name] = datapoint[field.name];\n        }\n      });\n      primaryKey.forEach(key => {\n        dataPiece[key] = datapoint[key];\n      });\n      dataPieces.push(dataPiece);\n    });\n  });\n\n  return { dataPieces, scales: screenScales };\n}\n\nclass ParallelCoordinatesController extends React.Component<Props, State> {\n  static defaultProps = {\n    metadata: {},\n    height: 500\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { options, data, schema } = this.props;\n    const { primaryKey } = options;\n\n    const parallelizeResults = parallelizeData(\n      data,\n      options.metrics,\n      schema.fields,\n      primaryKey\n    );\n\n    this.state = {\n      filterMode: true,\n      data: parallelizeResults.dataPieces,\n      dataScales: parallelizeResults.scales,\n      columnExtent: options.metrics.reduce(\n        (\n          metricHash: { [index: string]: number[] },\n          metric: { name: string }\n        ) => {\n          metricHash[metric.name] = [-Infinity, Infinity];\n          return metricHash;\n        },\n        {}\n      )\n    };\n  }\n\n  shouldComponentUpdate(): boolean {\n    return true;\n  }\n\n  brushing = (selectedExtent: number[], columnName: string) => {\n    const columnExtent = this.state.columnExtent;\n    columnExtent[columnName] = selectedExtent;\n    this.setState({ columnExtent });\n  };\n\n  render() {\n    const { options, data } = this.props;\n\n    const { primaryKey, metrics, chart, colors, setColor } = options;\n    const { dim1 } = chart;\n\n    const { columnExtent, filterMode } = this.state;\n\n    const hiddenHash = new Map();\n\n    const connectorFunction = (columnDatapoint: Dx.Datapoint) =>\n      primaryKey.map(key => columnDatapoint[key]).join(\",\");\n\n    Object.keys(columnExtent).forEach((key: string) => {\n      const extent = columnExtent[key].sort((a, b) => a - b);\n      this.state.data\n        .filter(\n          (datapoint: Dx.Datapoint) =>\n            datapoint.metric === key &&\n            (datapoint.pctvalue < extent[0] || datapoint.pctvalue > extent[1])\n        )\n        .forEach((datapoint: Dx.Datapoint) => {\n          hiddenHash.set(primaryKey.map(key => datapoint[key]).join(\",\"), true);\n        });\n    });\n\n    const additionalSettings: {\n      afterElements?: JSX.Element;\n      annotations?: Dx.JSONObject[];\n    } = {};\n\n    const shownData = data.filter(\n      datapoint =>\n        !hiddenHash.get(primaryKey.map(key => datapoint[key]).join(\",\"))\n    );\n    const filteredData = shownData.map(datapoint =>\n      primaryKey.map(key => datapoint[key]).join(\" - \")\n    );\n\n    const colorHash: { [index: string]: string } = { Other: \"grey\" };\n\n    if (dim1 && dim1 !== \"none\") {\n      const { uniqueValues, valueHash } = shownData.reduce(\n        (valueReducer, datapoint) => {\n          const value = datapoint[dim1];\n\n          valueReducer.valueHash[value] =\n            (valueReducer.valueHash[value] &&\n              valueReducer.valueHash[value] + 1) ||\n            1;\n\n          valueReducer.uniqueValues =\n            (!valueReducer.uniqueValues.find(\n              (uniqueValue: string) => uniqueValue === value\n            ) && [...valueReducer.uniqueValues, value]) ||\n            valueReducer.uniqueValues;\n\n          return valueReducer;\n        },\n        { uniqueValues: [], valueHash: {} }\n      );\n\n      const uniqueDimsForColors = data.reduce(\n        (colorArray: any[], datapoint) =>\n          colorArray.indexOf(datapoint[dim1]) === -1\n            ? [...colorArray, datapoint[dim1]]\n            : colorArray,\n        []\n      );\n\n      uniqueDimsForColors.forEach((value: string, index: number) => {\n        colorHash[value] = colors[index % colors.length];\n      });\n\n      additionalSettings.afterElements =\n        uniqueValues.length <= 18 ? (\n          <HTMLLegend\n            values={uniqueValues}\n            colorHash={colorHash}\n            valueHash={valueHash}\n            setColor={setColor}\n          />\n        ) : (\n          <NumberOfItemsP>{filteredData.length} items</NumberOfItemsP>\n        );\n    }\n\n    if (!filterMode) {\n      additionalSettings.annotations = metrics\n        .map(metric => ({\n          label: \"\",\n          metric: metric.name,\n          type: \"enclose-rect\",\n          color: \"green\",\n          disable: [\"connector\"],\n          coordinates: [\n            { metric: metric.name, pctvalue: columnExtent[metric.name][0] },\n            { metric: metric.name, pctvalue: columnExtent[metric.name][1] }\n          ]\n        }))\n        .filter(\n          annotation =>\n            annotation.coordinates[0].pctvalue !== 0 ||\n            annotation.coordinates[1].pctvalue !== 1\n        );\n    }\n\n    return (\n      <div>\n        <div>\n          <button\n            className={`button-text ${filterMode ? \"selected\" : \"\"}`}\n            onClick={() => this.setState({ filterMode: true })}\n          >\n            Filter\n          </button>\n          <button\n            className={`button-text ${filterMode ? \"\" : \"selected\"}`}\n            onClick={() => this.setState({ filterMode: false })}\n          >\n            Explore\n          </button>\n        </div>\n        <ResponsiveOrdinalFrame\n          data={this.state.data}\n          oAccessor=\"metric\"\n          rAccessor=\"pctvalue\"\n          type={{\n            type: \"point\",\n            r: 2\n          }}\n          connectorType={connectorFunction}\n          style={(datapoint: Dx.Datapoint) => ({\n            fill: hiddenHash.get(\n              primaryKey.map((key: string) => datapoint[key]).join(\",\")\n            )\n              ? \"lightgray\"\n              : colorHash[datapoint[dim1]],\n            opacity: hiddenHash.get(\n              primaryKey.map((key: string) => datapoint[key]).join(\",\")\n            )\n              ? 0.15\n              : 0.99\n          })}\n          connectorStyle={(datapoint: Dx.Datapoint) => ({\n            stroke: hiddenHash.get(\n              primaryKey.map((key: string) => datapoint.source[key]).join(\",\")\n            )\n              ? \"gray\"\n              : colorHash[datapoint.source[dim1]],\n            strokeWidth: hiddenHash.get(\n              primaryKey.map((key: string) => datapoint.source[key]).join(\",\")\n            )\n              ? 1\n              : 1.5,\n            strokeOpacity: hiddenHash.get(\n              primaryKey.map((key: string) => datapoint.source[key]).join(\",\")\n            )\n              ? 0.1\n              : 1\n          })}\n          responsiveWidth\n          margin={{ top: 20, left: 20, right: 20, bottom: 100 }}\n          oPadding={40}\n          pixelColumnWidth={80}\n          interaction={\n            filterMode\n              ? {\n                  columnsBrush: true,\n                  during: this.brushing,\n                  extent: Object.keys(this.state.columnExtent)\n                }\n              : null\n          }\n          pieceHoverAnnotation={!filterMode}\n          tooltipContent={(hoveredDatapoint: Dx.Datapoint) => {\n            const textColor = hiddenHash.get(\n              primaryKey.map((key: string) => hoveredDatapoint[key]).join(\",\")\n            )\n              ? \"grey\"\n              : colorHash[hoveredDatapoint[dim1]];\n            return (\n              <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n                <h3>\n                  {primaryKey\n                    .map((key: string) => hoveredDatapoint[key])\n                    .join(\", \")}\n                </h3>\n                {hoveredDatapoint[dim1] && (\n                  <h3 style={{ color: textColor }}>\n                    {dim1}: {hoveredDatapoint[dim1]}\n                  </h3>\n                )}\n                <p>\n                  {hoveredDatapoint.metric}: {hoveredDatapoint.rawvalue}\n                </p>\n              </TooltipContent>\n            );\n          }}\n          canvasPieces\n          canvasConnectors\n          oLabel={(columnLabel: string) => (\n            <g>\n              <text transform=\"rotate(45)\">{columnLabel}</text>\n              <g transform=\"translate(-20,-395)\">\n                <Axis\n                  scale={this.state.dataScales[columnLabel]}\n                  size={axisSize}\n                  orient=\"left\"\n                  ticks={5}\n                  tickFormat={(tickValue: number) => (\n                    <ParCoordsAxisTickG>\n                      <text>{numeralFormatting(tickValue)}</text>\n                      <text>{numeralFormatting(tickValue)}</text>\n                    </ParCoordsAxisTickG>\n                  )}\n                />\n              </g>\n            </g>\n          )}\n          {...additionalSettings}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ParallelCoordinatesController;\n","import * as Dx from \"../types\";\n\nfunction stringOrFnAccessor(\n  datapoint: Dx.Datapoint,\n  accessor: string | Function\n) {\n  return typeof accessor === \"function\"\n    ? accessor(datapoint)\n    : datapoint[accessor];\n}\n\ninterface SubsortObject {\n  array: Dx.Datapoint[];\n  value: number;\n  label: string;\n}\n\nexport const sortByOrdinalRange = (\n  oAccessor: string | ((datapoint: Dx.Datapoint) => string),\n  rAccessor: string | (() => void),\n  secondarySort: string,\n  data: Dx.DataProps[\"data\"]\n): any[] => {\n  const subsortData: { [index: string]: SubsortObject } = {};\n  let subsortArrays: SubsortObject[] = [];\n  data.forEach(datapoint => {\n    const ordinalValue = stringOrFnAccessor(datapoint, oAccessor);\n    if (!subsortData[ordinalValue]) {\n      subsortData[ordinalValue] = { array: [], value: 0, label: ordinalValue };\n      subsortArrays.push(subsortData[ordinalValue]);\n    }\n    subsortData[ordinalValue].array.push(datapoint);\n    subsortData[ordinalValue].value += stringOrFnAccessor(datapoint, rAccessor);\n  });\n\n  subsortArrays = subsortArrays.sort((ordinalAData, ordinalBData) => {\n    if (ordinalBData.value === ordinalAData.value) {\n      if (ordinalAData.label < ordinalBData.label) {\n        return -1;\n      }\n      if (ordinalAData.label > ordinalBData.label) {\n        return 1;\n      }\n      return 1;\n    }\n\n    return ordinalBData.value - ordinalAData.value;\n  });\n\n  if (secondarySort !== \"none\") {\n    subsortArrays.forEach(ordinalData => {\n      ordinalData.array = ordinalData.array.sort(\n        (ordinalAData, ordinalBData) =>\n          stringOrFnAccessor(ordinalBData, secondarySort) -\n          stringOrFnAccessor(ordinalAData, secondarySort)\n      );\n    });\n  }\n\n  return subsortArrays.reduce(\n    (combinedArray: Dx.Datapoint[], ordinalData) => [\n      ...combinedArray,\n      ...ordinalData.array\n    ],\n    []\n  );\n};\n","import { nest } from \"d3-collection\";\nimport { interpolateLab } from \"d3-interpolate\";\nimport * as React from \"react\";\n\nimport TooltipContent from \"../tooltip-content\";\n\nimport { chartHelpText } from \"../docs/chart-docs\";\nimport * as Dx from \"../types\";\n\ninterface HierarchicalOptions {\n  hierarchyType: Dx.HierarchyType;\n  chart: Dx.Chart;\n  selectedDimensions: Dx.ChartOptions[\"selectedDimensions\"];\n  primaryKey: Dx.ChartOptions[\"primaryKey\"];\n  colors: Dx.ChartOptions[\"colors\"];\n}\n\nconst parentPath = (datapoint: Dx.Datapoint, pathArray: string[]) => {\n  if (datapoint.parent) {\n    pathArray = parentPath(datapoint.parent, [datapoint.key, ...pathArray]);\n  } else {\n    pathArray = [\"root\", ...pathArray];\n  }\n  return pathArray;\n};\n\nconst hierarchicalTooltip = (\n  datapoint: Dx.Datapoint,\n  primaryKey: string[],\n  metric: string\n) => {\n  const pathString = datapoint.parent\n    ? parentPath(\n        datapoint.parent,\n        (datapoint.key && [datapoint.key]) || []\n      ).join(\"->\")\n    : \"\";\n  const content = [];\n  if (!datapoint.parent) {\n    content.push(<h2 key=\"hierarchy-title\">Root</h2>);\n  } else if (datapoint.key) {\n    content.push(<h2 key=\"hierarchy-title\">{datapoint.key}</h2>);\n    content.push(<p key=\"path-string\">{pathString}</p>);\n    content.push(<p key=\"hierarchy-value\">Total Value: {datapoint.value}</p>);\n    content.push(\n      <p key=\"hierarchy-children\">Children: {datapoint.children.length}</p>\n    );\n  } else {\n    content.push(\n      <p key=\"leaf-label\">\n        {pathString}\n        ->\n        {primaryKey.map((pkey: string) => datapoint[pkey]).join(\", \")}\n      </p>\n    );\n    content.push(\n      <p key=\"hierarchy-value\">\n        {metric}: {datapoint[metric]}\n      </p>\n    );\n  }\n\n  return content;\n};\n\nconst hierarchicalColor = (\n  colorHash: { [index: string]: string },\n  datapoint: Dx.Datapoint\n) => {\n  if (datapoint.depth === 0) {\n    return \"white\";\n  }\n  if (datapoint.depth === 1) {\n    return colorHash[datapoint.key];\n  }\n  let colorNode = datapoint;\n  for (let x = datapoint.depth; x > 1; x--) {\n    colorNode = colorNode.parent;\n  }\n  const lightenScale = interpolateLab(\"white\", colorHash[colorNode.key]);\n\n  return lightenScale(Math.max(0, datapoint.depth / 6));\n};\n\nexport const semioticHierarchicalChart = (\n  data: Dx.DataProps[\"data\"],\n  schema: Dx.DataProps[\"schema\"],\n  options: HierarchicalOptions\n) => {\n  const {\n    hierarchyType: baseHierarchyType = \"dendrogram\",\n    chart,\n    selectedDimensions,\n    primaryKey,\n    colors\n  } = options;\n  const { metric1 } = chart;\n\n  // a sunburst is just a radial partition\n  const hierarchyType =\n    baseHierarchyType === \"sunburst\" ? \"partition\" : baseHierarchyType;\n\n  if (selectedDimensions.length === 0) {\n    return {};\n  }\n\n  const nestingParams = nest<{ [index: string]: string }>();\n\n  selectedDimensions.forEach((dim: string) => {\n    nestingParams.key((param: { [index: string]: string }) => param[dim]);\n  });\n\n  const colorHash: { [index: string]: string } = {};\n  const sanitizedData: Array<{}> = [];\n\n  data.forEach((datapoint: Dx.Datapoint) => {\n    if (!colorHash[datapoint[selectedDimensions[0]]]) {\n      colorHash[datapoint[selectedDimensions[0]]] =\n        colors[Object.keys(colorHash).length];\n    }\n\n    sanitizedData.push({\n      ...datapoint,\n      sanitizedR: datapoint.r,\n      r: undefined\n    });\n  });\n\n  const entries = nestingParams.entries(sanitizedData);\n  const rootNode = { values: entries };\n\n  return {\n    edges: rootNode,\n    edgeStyle: () => ({ fill: \"lightgray\", stroke: \"gray\" }),\n    nodeStyle: (node: { depth: number }) => {\n      return {\n        fill: hierarchicalColor(colorHash, node),\n        stroke: node.depth === 1 ? \"white\" : \"black\",\n        strokeOpacity: node.depth * 0.1 + 0.2\n      };\n    },\n    networkType: {\n      type: hierarchyType,\n      projection: baseHierarchyType === \"sunburst\" && \"radial\",\n      hierarchySum: (node: { [index: string]: number }) => node[metric1],\n      hierarchyChildren: (node: { values: Array<{}> }) => node.values,\n      padding: hierarchyType === \"treemap\" ? 3 : 0\n    },\n    edgeRenderKey: (edge: object, index: number) => {\n      return index;\n    },\n    baseMarkProps: { forceUpdate: true },\n    margin: { left: 100, right: 100, top: 10, bottom: 10 },\n    hoverAnnotation: [\n      { type: \"frame-hover\" },\n      {\n        type: \"highlight\",\n        style: {\n          stroke: \"red\",\n          strokeOpacity: 0.5,\n          strokeWidth: 5,\n          fill: \"none\"\n        }\n      }\n    ],\n    tooltipContent: (hoveredDatapoint: Dx.Datapoint) => {\n      return (\n        <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n          {hierarchicalTooltip(hoveredDatapoint, primaryKey, metric1)}\n        </TooltipContent>\n      );\n    }\n  };\n};\n","import { scaleLinear, scaleTime } from \"d3-scale\";\nimport { curveMonotoneX } from \"d3-shape\";\nimport * as React from \"react\";\n\nimport TooltipContent from \"../tooltip-content\";\nimport * as Dx from \"../types\";\nimport { numeralFormatting } from \"../utilities\";\n\ninterface LineOptions {\n  chart: Dx.Chart;\n  selectedMetrics: string[];\n  lineType: Dx.LineType;\n  metrics: Dx.Metric[];\n  primaryKey: string[];\n  colors: string[];\n}\n\nexport const semioticLineChart = (\n  data: Dx.Datapoint[],\n  schema: Dx.Schema,\n  options: LineOptions\n) => {\n  let lineData;\n\n  const {\n    chart,\n    selectedMetrics,\n    lineType,\n    metrics,\n    primaryKey,\n    colors\n  } = options;\n  // const F = (a: number, b:Dx.Chart): string[]=> selectedMetrics;\n  const { timeseriesSort } = chart;\n\n  const timeSeriesFields = schema.fields.find(\n    field => field && field.name === timeseriesSort\n  );\n\n  const sortType =\n    timeseriesSort === \"array-order\"\n      ? \"integer\"\n      : timeSeriesFields && timeSeriesFields.type\n      ? timeSeriesFields.type\n      : null;\n\n  const formatting = (tickValue: Date | number) =>\n    sortType === \"datetime\"\n      ? (tickValue as Date).toLocaleString().split(\",\")[0]\n      : numeralFormatting(tickValue as number);\n\n  const xScale = sortType === \"datetime\" ? scaleTime() : scaleLinear();\n  lineData = metrics\n    .map(\n      (metric: Dx.Metric, index: number): Dx.LineData => {\n        const metricData =\n          timeseriesSort === \"array-order\"\n            ? data\n            : data.sort(\n                // Using some questionable type assertions here\n                (datapointA, datapointB) =>\n                  datapointA[timeseriesSort] - datapointB[timeseriesSort]\n              );\n        return {\n          color: colors[index % colors.length],\n          label: metric.name,\n          type: metric.type,\n          coordinates: metricData.map((datapoint, datapointValue) => ({\n            value: datapoint[metric.name],\n            x:\n              timeseriesSort === \"array-order\"\n                ? datapointValue\n                : datapoint[timeseriesSort],\n            label: metric.name,\n            color: colors[index % colors.length],\n            originalData: datapoint\n          }))\n        };\n      }\n    )\n    .filter(\n      (metric: Dx.LineData) =>\n        selectedMetrics.length === 0 ||\n        selectedMetrics.some(selectedMetric => selectedMetric === metric.label)\n    );\n\n  const canvasRender:boolean = lineData[0].coordinates.length > 250\n\n  return {\n    lineType: { type: lineType, interpolator: curveMonotoneX },\n    lines: lineData,\n    xScaleType: xScale,\n    canvasLines: canvasRender,\n    renderKey: (\n      line: { coordinates: Dx.LineCoordinate[]; label: string; line: string },\n      index: number\n    ) => {\n      return line.coordinates\n        ? `line-${line.label}`\n        : `linepoint=${line.label}-${index}`;\n    },\n    lineStyle: (line: Dx.LineCoordinate) => ({\n      fill: lineType === \"line\" ? \"none\" : line.color,\n      stroke: line.color,\n      fillOpacity: 0.75\n    }),\n    pointStyle: (point: Dx.LineData) => {\n      return {\n        fill: point.color,\n        fillOpacity: 0.75\n      };\n    },\n    axes: [\n      { orient: \"left\", tickFormat: numeralFormatting },\n      {\n        orient: \"bottom\",\n        ticks: 5,\n        tickFormat: (tickValue: number) => {\n          const label = formatting(tickValue);\n          const rotation = label.length > 4 ? \"45\" : \"0\";\n          const textAnchor = label.length > 4 ? \"start\" : \"middle\";\n          return (\n            <text transform={`rotate(${rotation})`} textAnchor={textAnchor}>\n              {label}\n            </text>\n          );\n        }\n      }\n    ],\n    hoverAnnotation: true,\n    xAccessor: \"x\",\n    yAccessor: \"value\",\n    showLinePoints: !canvasRender && lineType === \"line\",\n    margin: {\n      top: 20,\n      right: 200,\n      bottom: sortType === \"datetime\" ? 80 : 40,\n      left: 50\n    },\n    legend: {\n      title: \"Legend\",\n      position: \"right\",\n      width: 200,\n      legendGroups: [\n        {\n          label: \"\",\n          styleFn: (legendItem: Dx.LineData) => ({ fill: legendItem.color }),\n          items: lineData\n        }\n      ]\n    },\n    tooltipContent: (hoveredDatapoint: Dx.Datapoint) => {\n      return (\n        <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n          <p>\n            {hoveredDatapoint.parentLine && hoveredDatapoint.parentLine.label}\n          </p>\n          <p>\n            {(hoveredDatapoint.value &&\n              hoveredDatapoint.value.toLocaleString()) ||\n              hoveredDatapoint.value}\n          </p>\n          <p>\n            {timeseriesSort}: {formatting(hoveredDatapoint.x)}\n          </p>\n          {primaryKey.map((pkey, index) => (\n            <p key={`key-${index}`}>\n              {pkey}:{\" \"}\n              {(hoveredDatapoint.originalData[pkey].toString &&\n                hoveredDatapoint.originalData[pkey].toString()) ||\n                hoveredDatapoint.originalData[pkey]}\n            </p>\n          ))}\n        </TooltipContent>\n      );\n    }\n  };\n};\n","import { scaleLinear } from \"d3-scale\";\nimport * as React from \"react\";\n\nimport TooltipContent from \"../tooltip-content\";\nimport * as Dx from \"../types\";\n\ninterface NodeObject {\n  id: string;\n  nodeSize?: number;\n  degree: number;\n  x: number;\n  y: number;\n  value: number;\n}\n\ninterface EdgeObject {\n  source: NodeObject;\n  target: NodeObject;\n  weight: number;\n  value: number;\n}\n\ninterface NetworkOptions {\n  chart: Dx.Chart;\n  colors: Dx.ChartOptions[\"colors\"];\n  networkType: Dx.NetworkType;\n}\n\nconst fontScale = scaleLinear()\n  .domain([5, 30])\n  .range([8, 16])\n  .clamp(true);\n\nconst edgeStyles = {\n  force: (colorHash: Dx.JSONObject) => (edge: EdgeObject) => ({\n    fill: colorHash[edge.source.id],\n    stroke: colorHash[edge.source.id],\n    strokeOpacity: 0.25\n  }),\n  sankey: (colorHash: Dx.JSONObject) => (edge: EdgeObject) => ({\n    fill: colorHash[edge.source.id],\n    stroke: colorHash[edge.source.id],\n    strokeOpacity: 0.25\n  }),\n  matrix: (colorHash: Dx.JSONObject) => (edge: EdgeObject) => ({\n    fill: colorHash[edge.source.id],\n    stroke: \"none\"\n  }),\n  arc: (colorHash: Dx.JSONObject) => (edge: EdgeObject) => ({\n    fill: \"none\",\n    stroke: colorHash[edge.source.id],\n    strokeWidth: edge.weight || 1,\n    strokeOpacity: 0.75\n  })\n};\n\nconst nodeStyles = {\n  force: (colorHash: Dx.JSONObject) => (node: NodeObject) => ({\n    fill: colorHash[node.id],\n    stroke: colorHash[node.id],\n    strokeOpacity: 0.5\n  }),\n  sankey: (colorHash: Dx.JSONObject) => (node: NodeObject) => ({\n    fill: colorHash[node.id],\n    stroke: colorHash[node.id],\n    strokeOpacity: 0.5\n  }),\n  matrix: (colorHash: Dx.JSONObject) => (node: NodeObject) => ({\n    fill: \"none\",\n    stroke: \"#666\",\n    strokeOpacity: 1\n  }),\n  arc: (colorHash: Dx.JSONObject) => (node: NodeObject) => ({\n    fill: colorHash[node.id],\n    stroke: colorHash[node.id],\n    strokeOpacity: 0.5\n  })\n};\nconst nodeLinkHover = [\n  { type: \"frame-hover\" },\n  {\n    type: \"highlight\",\n    style: { stroke: \"red\", strokeOpacity: 0.5, strokeWidth: 5, fill: \"none\" }\n  }\n];\nconst hoverAnnotationSettings = {\n  force: nodeLinkHover,\n  sankey: nodeLinkHover,\n  matrix: [\n    { type: \"frame-hover\" },\n    { type: \"highlight\", style: { fill: \"red\", fillOpacity: 0.5 } }\n  ],\n  arc: nodeLinkHover\n};\n\nconst nodeLabeling: {\n  [index: string]: boolean | ((d: NodeObject) => JSX.Element | null);\n} = {\n  none: false,\n  static: true,\n  scaled: (d: NodeObject) => {\n    if (!d.nodeSize || d.nodeSize < 5) {\n      return null;\n    }\n    return (\n      <text\n        textAnchor=\"middle\"\n        y={fontScale(d.nodeSize) / 2}\n        fontSize={`${fontScale(d.nodeSize)}px`}\n      >\n        {d.id}\n      </text>\n    );\n  }\n};\n\nexport const semioticNetwork = (\n  data: Dx.DataProps[\"data\"],\n  schema: Dx.DataProps[\"schema\"],\n  options: NetworkOptions\n) => {\n  const { networkType = \"force\", chart, colors } = options;\n  const {\n    dim1: sourceDimension,\n    dim2: targetDimension,\n    metric1,\n    networkLabel\n  } = chart;\n\n  if (\n    !sourceDimension ||\n    sourceDimension === \"none\" ||\n    !targetDimension ||\n    targetDimension === \"none\"\n  ) {\n    return {};\n  }\n  const edgeHash: { [index: string]: EdgeObject } = {};\n  const networkData: EdgeObject[] = [];\n\n  data.forEach(edge => {\n    if (!edgeHash[`${edge[sourceDimension]}-${edge[targetDimension]}`]) {\n      edgeHash[`${edge[sourceDimension]}-${edge[targetDimension]}`] = {\n        source: edge[sourceDimension],\n        target: edge[targetDimension],\n        value: 0,\n        weight: 0\n      };\n      networkData.push(\n        edgeHash[`${edge[sourceDimension]}-${edge[targetDimension]}`]\n      );\n    }\n    edgeHash[`${edge[sourceDimension]}-${edge[targetDimension]}`].value +=\n      edge[metric1] || 1;\n    edgeHash[`${edge[sourceDimension]}-${edge[targetDimension]}`].weight += 1;\n  });\n\n  const colorHash: { [index: string]: string } = {};\n  data.forEach(edge => {\n    if (!colorHash[edge[sourceDimension]]) {\n      colorHash[edge[sourceDimension]] =\n        colors[Object.keys(colorHash).length % colors.length];\n    }\n    if (!colorHash[edge[targetDimension]]) {\n      colorHash[edge[targetDimension]] =\n        colors[Object.keys(colorHash).length % colors.length];\n    }\n  });\n\n  networkData.forEach(edge => {\n    edge.weight = Math.min(10, edge.weight);\n  });\n\n  return {\n    edges: networkData,\n    edgeType: networkType === \"force\" && \"halfarrow\",\n    edgeStyle: edgeStyles[networkType](colorHash),\n    nodeStyle: nodeStyles[networkType](colorHash),\n    nodeSizeAccessor: (node: NodeObject) => node.degree,\n    networkType: {\n      type: networkType,\n      iterations: 1000\n    },\n    hoverAnnotation: hoverAnnotationSettings[networkType],\n    tooltipContent: (hoveredNode: NodeObject) => {\n      return (\n        <TooltipContent x={hoveredNode.x} y={hoveredNode.y}>\n          <h3>{hoveredNode.id}</h3>\n          <p>Links: {hoveredNode.degree}</p>\n          {hoveredNode.value && <p>Value: {hoveredNode.value}</p>}\n        </TooltipContent>\n      );\n    },\n    nodeLabels: networkType === \"matrix\" ? false : nodeLabeling[networkLabel],\n    margin: { left: 100, right: 100, top: 10, bottom: 10 }\n  };\n};\n","import { scaleLinear } from \"d3-scale\";\nimport * as React from \"react\";\n\nimport HTMLLegend from \"../HTMLLegend\";\nimport TooltipContent from \"../tooltip-content\";\nimport * as Dx from \"../types\";\nimport { numeralFormatting } from \"../utilities\";\n\ninterface SummaryOptions {\n  chart: Dx.Chart;\n  colors: Dx.ChartOptions[\"colors\"];\n  primaryKey: string[];\n  setColor: Dx.ChartOptions[\"setColor\"];\n  summaryType: Dx.SummaryType;\n}\n\nconst fontScale = scaleLinear()\n  .domain([8, 25])\n  .range([14, 8])\n  .clamp(true);\n\nexport const semioticSummaryChart = (\n  data: Dx.DataProps[\"data\"],\n  schema: Dx.DataProps[\"schema\"],\n  options: SummaryOptions\n) => {\n  const additionalSettings: { afterElements?: JSX.Element } = {};\n  const colorHash: { [index: string]: string } = {};\n\n  const { chart, summaryType, primaryKey, colors, setColor } = options;\n\n  const { dim1, metric1 } = chart;\n\n  const oAccessor = dim1;\n\n  const rAccessor = metric1;\n\n  const uniqueValues = data.reduce(\n    (uniqueArray: string[], datapoint) =>\n      (!uniqueArray.find(\n        (dimValue: string) => dimValue === datapoint[dim1].toString()\n      ) && [...uniqueArray, datapoint[dim1].toString()]) ||\n      uniqueArray,\n    []\n  );\n\n  if (dim1 && dim1 !== \"none\") {\n    uniqueValues.forEach((dimValue, index) => {\n      colorHash[dimValue] = colors[index % colors.length];\n    });\n\n    additionalSettings.afterElements = (\n      <HTMLLegend\n        valueHash={{}}\n        values={uniqueValues}\n        colorHash={colorHash}\n        setColor={setColor}\n        colors={colors}\n      />\n    );\n  }\n\n  const summarySettings = {\n    summaryType: { type: summaryType, bins: 16, amplitude: 20 },\n    type: summaryType === \"violin\" && \"swarm\",\n    projection: \"horizontal\",\n    data,\n    oAccessor,\n    rAccessor,\n    summaryStyle: (summaryDatapoint: Dx.Datapoint) => ({\n      fill: colorHash[summaryDatapoint[dim1]] || colors[0],\n      fillOpacity: 0.8,\n      stroke: colorHash[summaryDatapoint[dim1]] || colors[0]\n    }),\n    style: (pieceDatapoint: Dx.Datapoint) => ({\n      fill: colorHash[pieceDatapoint[dim1]] || colors[0],\n      stroke: \"white\"\n    }),\n    oPadding: 5,\n    oLabel:\n      uniqueValues.length > 30\n        ? false\n        : (columnName: string) => (\n            <text\n              textAnchor=\"end\"\n              fontSize={`${(columnName && fontScale(columnName.length)) ||\n                12}px`}\n            >\n              {columnName}\n            </text>\n          ),\n    margin: { top: 25, right: 10, bottom: 50, left: 100 },\n    axis: {\n      orient: \"bottom\",\n      label: rAccessor,\n      tickFormat: numeralFormatting\n    },\n    baseMarkProps: { forceUpdate: true },\n    pieceHoverAnnotation: summaryType === \"violin\",\n    tooltipContent: (hoveredDatapoint: Dx.Datapoint) => {\n      return (\n        <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n          <h3>{primaryKey.map(pkey => hoveredDatapoint[pkey]).join(\", \")}</h3>\n          <p>\n            {dim1}: {hoveredDatapoint[dim1]}\n          </p>\n          <p>\n            {rAccessor}: {hoveredDatapoint[rAccessor]}\n          </p>\n        </TooltipContent>\n      );\n    },\n    ...additionalSettings\n  };\n\n  return summarySettings;\n};\n","import { scaleLinear, ScaleLinear, scaleThreshold } from \"d3-scale\";\nimport * as React from \"react\";\nimport { heatmapping, hexbinning } from \"semiotic\";\n\nimport HTMLLegend from \"../HTMLLegend\";\nimport TooltipContent from \"../tooltip-content\";\nimport { numeralFormatting } from \"../utilities\";\n\nimport * as Dx from \"../types\";\nimport { sortByOrdinalRange } from \"./shared\";\n\nimport styled from \"styled-components\";\n\nconst TooltipHeader = styled.div`\n  font-size: 14px;\n  text-transform: uppercase;\n  margin: 5px;\n  font-weight: 900;\n`;\n\nconst TooltipP = styled.div`\n  fontsize: 12px;\n  texttransform: uppercase;\n  margin: 5px;\n`;\n\ninterface XYPlotOptions {\n  areaType: Dx.AreaType;\n  chart: Dx.ChartOptions[\"chart\"];\n  colors: Dx.ChartOptions[\"colors\"];\n  dimensions: Dx.ChartOptions[\"dimensions\"];\n  height: Dx.ChartOptions[\"height\"];\n  primaryKey: Dx.ChartOptions[\"primaryKey\"];\n  setColor: Dx.ChartOptions[\"setColor\"];\n  trendLine: Dx.TrendLineType;\n  marginalGraphics: Dx.SummaryType;\n}\n\nconst binHash = {\n  heatmap: heatmapping,\n  hexbin: hexbinning\n};\n\nconst steps = [\"none\", \"#FBEEEC\", \"#f3c8c2\", \"#e39787\", \"#ce6751\", \"#b3331d\"];\nconst thresholds = scaleThreshold<number, string>()\n  .domain([0.01, 0.2, 0.4, 0.6, 0.8])\n  .range(steps);\n\nfunction combineTopAnnotations(\n  topQ: Dx.Datapoint[],\n  topSecondQ: Dx.Datapoint[],\n  dim2: string\n): any[] {\n  const combinedAnnotations: Dx.JSONObject[] = [];\n  const combinedHash: {\n    [index: string]: { [index: string]: any; coordinates: Dx.Datapoint[] };\n  } = {};\n  [...topQ, ...topSecondQ].forEach(topDatapoint => {\n    const hashD = combinedHash[topDatapoint[dim2]];\n\n    if (hashD) {\n      const newCoordinates = (hashD.coordinates && [\n        ...hashD.coordinates,\n        topDatapoint\n      ]) || [topDatapoint, hashD];\n      Object.keys(combinedHash[topDatapoint[dim2]]).forEach(key => {\n        delete combinedHash[topDatapoint[dim2]][key];\n      });\n      combinedHash[topDatapoint[dim2]].id = topDatapoint[dim2];\n      combinedHash[topDatapoint[dim2]].label = topDatapoint[dim2];\n      combinedHash[topDatapoint[dim2]].type = \"react-annotation\";\n      combinedHash[topDatapoint[dim2]].coordinates = newCoordinates;\n    } else {\n      combinedHash[topDatapoint[dim2]] = {\n        type: \"react-annotation\",\n        label: topDatapoint[dim2],\n        id: topDatapoint[dim2],\n        coordinates: [],\n        ...topDatapoint\n      };\n      combinedAnnotations.push(combinedHash[topDatapoint[dim2]]);\n    }\n  });\n  return combinedAnnotations;\n}\n\nexport const semioticHexbin = (\n  data: Dx.DataProps[\"data\"],\n  schema: Dx.DataProps[\"schema\"],\n  options: XYPlotOptions\n) => {\n  return semioticScatterplot(data, schema, options, options.areaType);\n};\n\nexport const semioticScatterplot = (\n  data: Dx.DataProps[\"data\"],\n  schema: Dx.DataProps[\"schema\"],\n  options: XYPlotOptions,\n  type: string = \"scatterplot\"\n) => {\n  const height = options.height - 150 || 500;\n\n  const {\n    chart,\n    primaryKey,\n    colors,\n    setColor,\n    dimensions,\n    trendLine,\n    marginalGraphics\n  } = options;\n\n  const { dim1, dim2, dim3, metric1, metric2, metric3 } = chart;\n  const filteredData: Dx.Datapoint[] = data.filter(\n    (datapoint: Dx.Datapoint) =>\n      datapoint[metric1] &&\n      datapoint[metric2] &&\n      (!metric3 || metric3 === \"none\" || datapoint[metric3])\n  );\n\n  const pointTooltip = (hoveredDatapoint: Dx.Datapoint) => {\n    return (\n      <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n        <h3>{primaryKey.map(pkey => hoveredDatapoint[pkey]).join(\", \")}</h3>\n        {dimensions.map(dim => (\n          <p key={`tooltip-dim-${dim.name}`}>\n            {dim.name}:{\" \"}\n            {(hoveredDatapoint[dim.name].toString &&\n              hoveredDatapoint[dim.name].toString()) ||\n              hoveredDatapoint[dim.name]}\n          </p>\n        ))}\n        <p>\n          {metric1}: {hoveredDatapoint[metric1]}\n        </p>\n        <p>\n          {metric2}: {hoveredDatapoint[metric2]}\n        </p>\n        {metric3 && metric3 !== \"none\" && (\n          <p>\n            {metric3}: {hoveredDatapoint[metric3]}\n          </p>\n        )}\n      </TooltipContent>\n    );\n  };\n\n  const areaTooltip = (hoveredDatapoint: Dx.Datapoint) => {\n    const binItems = hoveredDatapoint.binItems || hoveredDatapoint.data || [];\n\n    if (binItems.length === 0) {\n      return null;\n    }\n    return (\n      <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n        <TooltipHeader>\n          ID, {metric1}, {metric2}\n        </TooltipHeader>\n        {binItems.map(\n          (binnedDatapoint: { [index: string]: any }, index: number) => {\n            const id = dimensions\n              .map(\n                dim =>\n                  (binnedDatapoint[dim.name].toString &&\n                    binnedDatapoint[dim.name].toString()) ||\n                  binnedDatapoint[dim.name]\n              )\n              .join(\",\");\n            return (\n              <TooltipP key={id + index}>\n                {id}, {binnedDatapoint[metric1]}, {binnedDatapoint[metric2]}\n              </TooltipP>\n            );\n          }\n        )}\n      </TooltipContent>\n    );\n  };\n\n  let sizeScale: (() => number) | ScaleLinear<number, number> = () => 5;\n  const colorHash: { [index: string]: string } = { Other: \"grey\" };\n  const additionalSettings: { afterElements?: JSX.Element } = {};\n\n  let annotations;\n\n  if (dim2 && dim2 !== \"none\") {\n    const topQ = [...filteredData]\n      .sort(\n        (datapointA, datapointB) => datapointB[metric1] - datapointA[metric1]\n      )\n      .filter((d, index) => index < 3);\n    const topSecondQ = [...filteredData]\n      .sort(\n        (datapointA, datapointB) => datapointB[metric2] - datapointA[metric2]\n      )\n      .filter(datapoint => topQ.indexOf(datapoint) === -1)\n      .filter((d, index) => index < 3);\n\n    annotations = combineTopAnnotations(topQ, topSecondQ, dim2);\n  }\n\n  // disabling annotations for now\n  annotations = undefined;\n\n  if (metric3 && metric3 !== \"none\") {\n    const dataMin = Math.min(\n      ...filteredData.map(datapoint => datapoint[metric3])\n    );\n    const dataMax = Math.max(\n      ...filteredData.map(datapoint => datapoint[metric3])\n    );\n    sizeScale = scaleLinear()\n      .domain([dataMin, dataMax])\n      .range([2, 20]);\n  }\n  const sortedData = sortByOrdinalRange(\n    metric1,\n    (metric3 !== \"none\" && metric3) || metric2,\n    \"none\",\n    data\n  );\n\n  if (\n    (type === \"scatterplot\" || type === \"contour\") &&\n    dim1 &&\n    dim1 !== \"none\"\n  ) {\n    const uniqueValues = sortedData.reduce(\n      (uniqueArray, datapoint) =>\n        (!uniqueArray.find(\n          (uniqueDim: string) => uniqueDim === datapoint[dim1].toString()\n        ) && [...uniqueArray, datapoint[dim1].toString()]) ||\n        uniqueArray,\n      []\n    );\n\n    uniqueValues.forEach((dimValue: string, index: number) => {\n      colorHash[dimValue] = index > 18 ? \"grey\" : colors[index % colors.length];\n    });\n\n    additionalSettings.afterElements = (\n      <HTMLLegend\n        valueHash={{}}\n        values={uniqueValues}\n        colorHash={colorHash}\n        setColor={setColor}\n        colors={colors}\n      />\n    );\n  }\n\n  let areas: Array<{ coordinates: Dx.Datapoint[] }> = [];\n  if (\n    type === \"heatmap\" ||\n    type === \"hexbin\" ||\n    (type === \"contour\" && dim3 === \"none\")\n  ) {\n    areas = [{ coordinates: filteredData }];\n\n    if (type !== \"contour\") {\n      const calculatedAreas = binHash[type]({\n        summaryType: { type, bins: 10 },\n        data: {\n          coordinates: filteredData.map(datapoint => ({\n            ...datapoint,\n            x: datapoint[metric1],\n            y: datapoint[metric2]\n          }))\n        },\n        size: [height, height]\n      });\n\n      areas = calculatedAreas;\n\n      const thresholdSteps = [0.2, 0.4, 0.6, 0.8, 1]\n        .map(thresholdValue =>\n          Math.floor(calculatedAreas.binMax * thresholdValue)\n        )\n        .reduce(\n          (thresholdArray: number[], thresholdValue: number) =>\n            thresholdValue === 0 ||\n            thresholdArray.indexOf(thresholdValue) !== -1\n              ? thresholdArray\n              : [...thresholdArray, thresholdValue],\n          []\n        );\n\n      const withZeroThresholdSteps = [0, ...thresholdSteps];\n\n      const hexValues: string[] = [];\n\n      withZeroThresholdSteps.forEach((thresholdValue, index) => {\n        const nextValue = withZeroThresholdSteps[index + 1];\n        if (nextValue) {\n          hexValues.push(`${thresholdValue + 1} - ${nextValue}`);\n        }\n      });\n\n      const thresholdColors = [\n        \"#FBEEEC\",\n        \"#f3c8c2\",\n        \"#e39787\",\n        \"#ce6751\",\n        \"#b3331d\"\n      ];\n      const hexHash: { [index: string]: string } = {};\n\n      hexValues.forEach((binLabel, index) => {\n        hexHash[binLabel] = thresholdColors[index];\n      });\n\n      thresholds\n        .domain([0.01, ...thresholdSteps])\n        .range([\n          \"none\",\n          ...thresholdColors.filter((d, index) => index < thresholdSteps.length)\n        ]);\n\n      additionalSettings.afterElements = (\n        <HTMLLegend\n          valueHash={{}}\n          values={hexValues}\n          colorHash={hexHash}\n          colors={colors}\n          setColor={setColor}\n        />\n      );\n    }\n  } else if (type === \"contour\") {\n    const multiclassHash: {\n      [index: string]: {\n        label: string;\n        color: string;\n        coordinates: Dx.Datapoint[];\n      };\n    } = {};\n    areas = [];\n    filteredData.forEach(datapoint => {\n      if (!multiclassHash[datapoint[dim1]]) {\n        multiclassHash[datapoint[dim1]] = {\n          label: datapoint[dim1],\n          color: colorHash[datapoint[dim1]],\n          coordinates: []\n        };\n        areas.push(multiclassHash[datapoint[dim1]]);\n      }\n      multiclassHash[datapoint[dim1]].coordinates.push(datapoint);\n    });\n  }\n\n  const renderInCanvas =\n    (type === \"scatterplot\" || type === \"contour\") && data.length > 999;\n\n  let marginalGraphicsAxes: object[] = [];\n\n  if (marginalGraphics !== \"none\" && type === \"scatterplot\") {\n    marginalGraphicsAxes = [\n      {\n        orient: \"right\",\n        tickLineGenerator: () => <g />,\n        tickFormat: () => \"\",\n        marginalSummaryType: {\n          type: marginalGraphics,\n          showPoints: !renderInCanvas\n        }\n      },\n      {\n        orient: \"top\",\n        tickLineGenerator: () => <g />,\n        tickFormat: () => \"\",\n        marginalSummaryType: {\n          type: marginalGraphics,\n          showPoints: !renderInCanvas\n        }\n      }\n    ];\n  }\n\n  let calculatedSummaryType;\n  if (type === \"scatterplot\" && trendLine !== \"none\") {\n    calculatedSummaryType = { type: \"trendline\", regressionType: trendLine };\n  } else if (type !== \"scatterplot\") {\n    calculatedSummaryType = {\n      type,\n      bins: 10,\n      thresholds: dim3 === \"none\" ? 6 : 3\n    };\n  }\n\n  const xyPlotSettings: { [key: string]: any } = {\n    xAccessor: type === \"hexbin\" || type === \"heatmap\" ? \"x\" : metric1,\n    yAccessor: type === \"hexbin\" || type === \"heatmap\" ? \"y\" : metric2,\n    axes: [\n      {\n        orient: \"left\",\n        ticks: 6,\n        label: metric2,\n        tickFormat: numeralFormatting,\n        baseline: type === \"scatterplot\",\n        tickSize: type === \"heatmap\" ? 0 : undefined\n      },\n      {\n        orient: \"bottom\",\n        ticks: 6,\n        label: metric1,\n        tickFormat: numeralFormatting,\n        footer: type === \"heatmap\",\n        baseline: type === \"scatterplot\",\n        tickSize: type === \"heatmap\" ? 0 : undefined\n      },\n      ...marginalGraphicsAxes\n    ],\n    points: (type === \"scatterplot\" || type === \"contour\") && data,\n    canvasPoints: renderInCanvas,\n    summaryType: calculatedSummaryType,\n    summaryStyle: (areaDatapoint: Dx.Datapoint) => {\n      if (type === \"scatterplot\") {\n        return { stroke: \"darkred\", strokeWidth: 2, fill: \"none\" };\n      }\n\n      return {\n        fill:\n          type === \"contour\"\n            ? \"none\"\n            : thresholds((areaDatapoint.binItems || areaDatapoint.data).length),\n        stroke:\n          type !== \"contour\"\n            ? undefined\n            : dim3 === \"none\"\n            ? \"#BBB\"\n            : areaDatapoint.parentSummary.color,\n        strokeWidth: type === \"contour\" ? 2 : 1\n      };\n    },\n    pointStyle: (datapoint: Dx.Datapoint) => ({\n      r: renderInCanvas\n        ? 2\n        : type === \"contour\"\n        ? 3\n        : sizeScale(datapoint[metric3]),\n      fill: colorHash[datapoint[dim1]] || \"black\",\n      fillOpacity: 0.75,\n      stroke: renderInCanvas ? \"none\" : type === \"contour\" ? \"white\" : \"black\",\n      strokeWidth: type === \"contour\" ? 0.5 : 1,\n      strokeOpacity: 0.9\n    }),\n    hoverAnnotation: true,\n    responsiveWidth: false,\n    size: [height + 105, height + 80],\n    margin: { left: 75, bottom: 50, right: 30, top: 30 },\n    annotations: (type === \"scatterplot\" && annotations) || undefined,\n    annotationSettings: {\n      layout: { type: \"marginalia\", orient: \"right\", marginOffset: 30 }\n    },\n    tooltipContent:\n      ((type === \"hexbin\" || type === \"heatmap\") && areaTooltip) ||\n      pointTooltip,\n    ...additionalSettings\n  };\n\n  if (type !== \"scatterplot\") {\n    xyPlotSettings.areas = areas;\n  }\n\n  return xyPlotSettings;\n};\n","import {\n  ResponsiveNetworkFrame,\n  ResponsiveOrdinalFrame,\n  ResponsiveXYFrame\n} from \"semiotic\";\n\nimport ParallelCoordinatesController from \"../ParallelCoordinatesController\";\n\nimport { semioticBarChart } from \"./bar\";\nimport { semioticHierarchicalChart } from \"./hierarchical\";\nimport { semioticLineChart } from \"./line\";\nimport { semioticNetwork } from \"./network\";\nimport { semioticSummaryChart } from \"./summary\";\nimport { semioticHexbin, semioticScatterplot } from \"./xyplot\";\n\nimport * as Dx from \"../types\";\n\nconst semioticParallelCoordinates = (\n  data: Dx.Datapoint[],\n  schema: Dx.Schema,\n  options: Dx.ChartOptions\n) => {\n  return {\n    data,\n    schema,\n    options\n  };\n};\n\nexport const semioticSettings: any = {\n  line: {\n    Frame: ResponsiveXYFrame,\n    controls: \"switch between linetype\",\n    chartGenerator: semioticLineChart\n  },\n  scatter: {\n    Frame: ResponsiveXYFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticScatterplot\n  },\n  hexbin: {\n    Frame: ResponsiveXYFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticHexbin\n  },\n  bar: {\n    Frame: ResponsiveOrdinalFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticBarChart\n  },\n  summary: {\n    Frame: ResponsiveOrdinalFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticSummaryChart\n  },\n  network: {\n    Frame: ResponsiveNetworkFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticNetwork\n  },\n  hierarchy: {\n    Frame: ResponsiveNetworkFrame,\n    controls: \"switch between modes\",\n    chartGenerator: semioticHierarchicalChart\n  },\n  parallel: {\n    Frame: ParallelCoordinatesController,\n    controls: \"switch between modes\",\n    chartGenerator: semioticParallelCoordinates\n  }\n};\n","import * as React from \"react\";\n\nimport HTMLLegend from \"../HTMLLegend\";\nimport TooltipContent from \"../tooltip-content\";\nimport { numeralFormatting } from \"../utilities\";\n\nimport * as Dx from \"../types\";\nimport { sortByOrdinalRange } from \"./shared\";\n\ninterface BarOptions {\n  selectedDimensions: string[];\n  chart: Dx.Chart;\n  colors: string[];\n  setColor: (color: string[]) => void;\n  barGrouping: Dx.BarGroupingType;\n  dimensions: object[];\n  metrics: object[];\n}\n\nexport const semioticBarChart = (\n  data: Dx.Datapoint[],\n  schema: Dx.Schema,\n  options: BarOptions\n) => {\n  const { selectedDimensions, chart, colors, setColor, barGrouping } = options;\n  const { dim1, metric1, metric3, metric4 } = chart;\n\n  const oAccessor =\n    selectedDimensions.length === 0\n      ? dim1\n      : (datapoint: Dx.Datapoint) =>\n          selectedDimensions\n            .map(selectedDim => datapoint[selectedDim])\n            .join(\",\");\n\n  const rAccessor = metric1;\n\n  const additionalSettings: {\n    afterElements?: JSX.Element;\n    dynamicColumnWidth?: string;\n    rExtent?: number[];\n    tooltipContent?: (hoveredDataPoint: {\n      x: number;\n      y: number;\n      [key: string]: any;\n    }) => JSX.Element;\n    pieceHoverAnnotation?: boolean;\n  } = {};\n\n  const colorHash: { [key: string]: string; Other: \"grey\" } = { Other: \"grey\" };\n\n  const sortedData = sortByOrdinalRange(\n    oAccessor,\n    (metric3 !== \"none\" && metric3) || rAccessor,\n    dim1,\n    data\n  );\n\n  if (metric3 && metric3 !== \"none\") {\n    additionalSettings.dynamicColumnWidth = metric3;\n  }\n  let errorBarAnnotations;\n  if (barGrouping === \"Clustered\" && metric4 && metric4 !== \"none\") {\n    additionalSettings.rExtent = [\n      Math.min(...data.map(d => d[metric1] - d[metric4])),\n      Math.max(...data.map(d => d[metric1] + d[metric4]))\n    ];\n\n    errorBarAnnotations = (\n      d: Dx.Datapoint,\n      i: number,\n      xy: {\n        width: number;\n        height: number;\n        styleFn: (args: object) => object;\n        rScale: (args: object) => number;\n      }\n    ) => {\n      const errorBarSize = Math.abs(\n        xy.rScale(d[metric1]) - xy.rScale(d[metric1] + d[metric4])\n      );\n\n      return (\n        <g>\n          <rect width={xy.width} height={xy.height} style={xy.styleFn(d)} />\n          <g\n            transform={`translate(${xy.width / 2},${\n              d.negative ? xy.height : 0\n            })`}\n            stroke=\"#333\"\n            strokeWidth=\"1\"\n            opacity=\"0.75\"\n          >\n            <line\n              y1={-errorBarSize}\n              y2={-errorBarSize}\n              x1={Math.min(0, -xy.width / 2 + 2)}\n              x2={Math.max(0, xy.width / 2 - 2)}\n            />\n            <line x1={0} x2={0} y1={-errorBarSize} y2={errorBarSize} />\n            <line\n              y1={errorBarSize}\n              y2={errorBarSize}\n              x1={Math.min(0, -xy.width / 2 + 2)}\n              x2={Math.max(0, xy.width / 2 - 2)}\n            />\n          </g>\n        </g>\n      );\n    };\n  }\n\n  const uniqueValues = sortedData.reduce(\n    (uniques, datapoint) =>\n      !uniques.find(\n        (uniqueDimName: string) => uniqueDimName === datapoint[dim1].toString()\n      )\n        ? [...uniques, datapoint[dim1].toString()]\n        : uniques,\n    []\n  );\n\n  if (dim1 && dim1 !== \"none\") {\n    uniqueValues.forEach((value: string, index: number) => {\n      // Color the first 18 values after that everything gets grey because more than 18 colors is unreadable no matter what you want\n      colorHash[value] = index > 18 ? \"grey\" : colors[index % colors.length];\n    });\n\n    additionalSettings.afterElements = (\n      <HTMLLegend\n        valueHash={{}}\n        values={uniqueValues}\n        colorHash={colorHash}\n        setColor={setColor}\n        colors={colors}\n      />\n    );\n\n    if (\n      barGrouping === \"Clustered\" ||\n      (selectedDimensions.length > 0 && selectedDimensions.join(\",\") !== dim1)\n    ) {\n      additionalSettings.pieceHoverAnnotation = true;\n      const combinedOptions = [\n        ...options.dimensions,\n        ...options.metrics\n      ] as Array<{ name: string }>;\n      additionalSettings.tooltipContent = hoveredDatapoint => {\n        return (\n          <TooltipContent x={hoveredDatapoint.x} y={hoveredDatapoint.y}>\n            <div\n              style={{ heightMax: \"300px\", display: \"flex\", flexWrap: \"wrap\" }}\n            >\n              {combinedOptions.map((dim: { name: string }, index: number) => (\n                <div\n                  style={{\n                    margin: \"2px 5px 0\",\n                    display: \"inline-block\",\n                    minWidth: \"100px\"\n                  }}\n                  key={`dim-${index}`}\n                >\n                  <span style={{ fontWeight: 600 }}>{dim.name}</span>:{\" \"}\n                  {hoveredDatapoint[dim.name]}\n                </div>\n              ))}\n            </div>\n          </TooltipContent>\n        );\n      };\n    }\n  }\n\n  // replace with incoming cardinality when df.describe metadata is implemented\n  const cardinality =\n    (selectedDimensions.length > 0 &&\n      !(selectedDimensions.length === 1 && dim1 === selectedDimensions[0]) &&\n      sortedData\n        .map(datapoint => datapoint[dim1])\n        .reduce(\n          (uniqueDimValues, dimName) =>\n            uniqueDimValues.indexOf(dimName) === -1\n              ? [...uniqueDimValues, dimName]\n              : uniqueDimValues,\n          []\n        ).length) ||\n    0;\n\n  const barSettings = {\n    type:\n      barGrouping === \"Clustered\"\n        ? { type: \"clusterbar\", customMark: errorBarAnnotations }\n        : { type: \"bar\", customMark: errorBarAnnotations },\n    data: sortedData,\n    oAccessor,\n    rAccessor,\n    style: (datapoint: Dx.Datapoint) => ({\n      fill: colorHash[datapoint[dim1]] || colors[0],\n      stroke: colorHash[datapoint[dim1]] || colors[0]\n    }),\n    oPadding: uniqueValues.length > 30 ? 1 : 5,\n    oLabel:\n      uniqueValues.length > 30\n        ? false\n        : (columnLabel: object) => {\n            return <text transform=\"rotate(90)\">{columnLabel}</text>;\n          },\n    hoverAnnotation: true,\n    margin: { top: 10, right: 10, bottom: 100, left: 70 },\n    axis: {\n      orient: \"left\",\n      label: rAccessor,\n      tickFormat: numeralFormatting\n    },\n    tooltipContent: (hoveredDatapoint: { [key: string]: any }) => {\n      return (\n        <TooltipContent\n          x={hoveredDatapoint.column.xyData[0].xy.x}\n          y={hoveredDatapoint.column.xyData[0].xy.y}\n        >\n          <p>\n            {typeof oAccessor === \"function\"\n              ? oAccessor(hoveredDatapoint.pieces[0])\n              : hoveredDatapoint.pieces[0][oAccessor]}\n          </p>\n          <p>\n            {rAccessor}:{\" \"}\n            {hoveredDatapoint.pieces\n              .map((piece: { [key: string]: number }) => piece[rAccessor])\n              .reduce((total: number, value: number) => total + value, 0)}\n          </p>\n          {metric3 && metric3 !== \"none\" && (\n            <p>\n              {metric3}:{\" \"}\n              {hoveredDatapoint.pieces\n                .map((piece: { [key: string]: number }) => piece[metric3])\n                .reduce((total: number, value: number) => total + value, 0)}\n            </p>\n          )}\n        </TooltipContent>\n      );\n    },\n    baseMarkProps: { forceUpdate: true },\n    size: [500, 600],\n    ...additionalSettings\n  };\n\n  return barSettings;\n};\n","export const chartHelpText = {\n  line:\n    \"Line and stacked area charts for time series data where each row is a point and columns are data to be plotted.\",\n  bar: \"Bar charts to compare individual and aggregate amounts.\",\n  scatter: \"Scatterplot for comparing correlation between x and y values.\",\n  grid: \"A table of data.\",\n  network:\n    \"Force-directed, adjacency matrix, arc diagram and sankey network visualization suitable for data that is an edge list where one dimension represents source and another dimension represents target.\",\n  summary: \"Distribution plots such as boxplots and violin plots to compare.\",\n  hexbin:\n    \"Shows aggregate distribution of larger datasets across x and y metrics using hexbin, heatmap or contour plots.\",\n  parallel:\n    \"Parallel coordinates for comparing and filtering across different values in the dataset.\",\n  hierarchy:\n    \"Nest data by categorical values using treemap, dendrogram, sunburst or partition.\"\n};\n\nconst hexScatterX = \"Plot this metric along the X axis\";\n\nexport type ChartOptionTypes =\n  | \"metric1\"\n  | \"metric2\"\n  | \"metric3\"\n  | \"metric4\"\n  | \"dim1\"\n  | \"dim2\"\n  | \"dim3\"\n  | \"timeseriesSort\"\n  | \"networkLabel\";\n\nexport type ExplorationTypes =\n  | ChartOptionTypes\n  | \"lineDimensions\"\n  | \"lineType\"\n  | \"areaType\"\n  | \"networkType\"\n  | \"summaryType\"\n  | \"hierarchyType\"\n  | \"nestingDimensions\"\n  | \"barDimensions\"\n  | \"trendLine\"\n  | \"barGrouping\"\n  | \"marginalGraphics\";\nexport const controlHelpText: {\n  [key in ExplorationTypes]?: { [key: string]: string } | string\n} = {\n  metric1: {\n    default: \"Plot this metric\",\n    scatter: hexScatterX,\n    hexbin: hexScatterX\n  },\n  metric2: {\n    default: \"Plot this metric along the Y axis\"\n  },\n  metric3: {\n    default: \"Size the width of bars (Marimekko style) based on this metric\",\n    scatter: \"Size the radius of points based on this metric\"\n  },\n  metric4: \"Error bars according to this value\",\n  dim1: {\n    default: \"Color items by this dimension\",\n    summary: \"Group items into this category\",\n    network: \"Use this dimension to determine the source node\"\n  },\n  dim2: {\n    default: \"Label prominent datapoints using this dimension\",\n    network: \"Use this dimension to determine the target node\"\n  },\n  dim3: {\n    default: \"Split contours into separate groups based on this dimension\"\n  },\n  networkType:\n    \"Represent network as a force-directed network (good for social networks) or as a sankey diagram (good for flow networks)\",\n  hierarchyType:\n    \"Represent your hierarchy as a tree (good for taxonomies) or a treemap (good for volumes) or partition (also good for volume where category volume is important)\",\n  timeseriesSort:\n    \"Sort line chart time series by its array position or by a specific metric or time\",\n  lineType:\n    \"Represent your data using a line chart, stacked area chart or ranked area chart\",\n  areaType: \"Represent as a heatmap, hexbin or contour plot\",\n  lineDimensions:\n    \"Only plot the selected dimensions (or all if none are selected)\",\n  trendLine: \"Select the kind of trend line you want to display on the chart\",\n  barGrouping:\n    \"Choose between a clustered or a stacked bar chart when there are multiple pieces in the same category\",\n  marginalGraphics:\n    \"Choose the kind of marginal summary you want to see for summarizing density along the axes\"\n};\n","import { SVGWrapper } from \"@nteract/octicons\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst IconPath = styled.path`\n  & {\n    fill: var(--theme-app-bg, #ccc);\n    stroke: var(--theme-app-fg, #2b2b2b);\n  }\n`;\n\nexport const BoxplotIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Summary Diagram</title>\n    <IconPath d=\"M 9.2300893,12.746467 15.329337,12.746467 M 0.73981357,15.376296 6.8390612,15.376296 M 3.9346579,0.6634694 3.9346579,15.376296 M 0.73981357,0.6634694 6.8390612,0.6634694 M 12.424932,1.5163867 12.424932,12.817543 M 9.2300893,1.5163867 15.329337,1.5163867 M 9.3149176,3.8522966 15.454941,3.8522966 15.454941,10.067428 9.3149176,10.067428 Z M 0.63101533,5.4042547 6.771038,5.4042547 6.771038,13.040916 0.63101533,13.040916 Z\" />\n  </SVGWrapper>\n);\n\nexport const TreeIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Dendrogram</title>\n    <IconPath d=\"M 5.3462352,16.86934 5.3462352,11.568531 M 5.0378073,11.186463 10.665375,16.453304 M 5.5794816,11.049276 -0.04808655,16.316116 M 10.903757,11.840357 10.903757,6.5395482 M 10.722225,5.9958343 16.349791,11.262675 M 10.758529,6.1997119 5.1309613,11.466552 M 5.3851096,6.1997401 5.3851096,0.06818774 M 5.3488028,0.96685111 10.976372,6.2336914 M 5.3851095,0.89889187 -0.24245868,6.1657322\" />\n  </SVGWrapper>\n);\n\nexport const NetworkIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Network</title>\n    <IconPath d=\"M 12.272948,3.9756652 9.2580839,6.8311579 M 3.7415227,3.9107679 6.435657,6.5066704 M 3.9981069,12.087859 6.6280954,9.6866496 M 12.208802,12.217654 9.0656456,9.556855 M 0.58721146,13.461599 A 2.0038971,2.0273734 0 0 0 2.591109,15.488973 2.0038971,2.0273734 0 0 0 4.5950056,13.461599 2.0038971,2.0273734 0 0 0 2.591109,11.434226 2.0038971,2.0273734 0 0 0 0.58721146,13.461599 Z M 11.483612,2.5370283 A 2.0038971,2.0273734 0 0 0 13.487509,4.5644013 2.0038971,2.0273734 0 0 0 15.491407,2.5370283 2.0038971,2.0273734 0 0 0 13.487509,0.50965432 2.0038971,2.0273734 0 0 0 11.483612,2.5370283 Z M 15.491407,13.461599 A 2.0038971,2.0273734 0 0 1 13.487509,15.488973 2.0038971,2.0273734 0 0 1 11.483612,13.461599 2.0038971,2.0273734 0 0 1 13.487509,11.434226 2.0038971,2.0273734 0 0 1 15.491407,13.461599 Z M 9.9298938,8.1089002 A 2.0038971,2.0273734 0 0 1 7.9259965,10.136275 2.0038971,2.0273734 0 0 1 5.9220989,8.1089002 2.0038971,2.0273734 0 0 1 7.9259965,6.0815273 2.0038971,2.0273734 0 0 1 9.9298938,8.1089002 Z M 4.5950056,2.5370283 A 2.0038971,2.0273734 0 0 1 2.591109,4.5644013 2.0038971,2.0273734 0 0 1 0.58721146,2.5370283 2.0038971,2.0273734 0 0 1 2.591109,0.50965432 2.0038971,2.0273734 0 0 1 4.5950056,2.5370283 Z\" />\n  </SVGWrapper>\n);\n\nexport const ScatterplotIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Scatterplot</title>\n    <IconPath d=\"M 6.2333524,7.1483631 A 2.1883047,2.1883047 0 0 1 4.0450478,9.3366678 2.1883047,2.1883047 0 0 1 1.8567431,7.1483631 2.1883047,2.1883047 0 0 1 4.0450478,4.9600585 2.1883047,2.1883047 0 0 1 6.2333524,7.1483631 Z M 12.201456,4.0316868 A 2.1883047,2.1883047 0 0 1 10.013151,6.2199914 2.1883047,2.1883047 0 0 1 7.8248465,4.0316868 2.1883047,2.1883047 0 0 1 10.013151,1.8433821 2.1883047,2.1883047 0 0 1 12.201456,4.0316868 Z M 14.787634,11.45866 A 2.1883047,2.1883047 0 0 1 12.599329,13.646965 2.1883047,2.1883047 0 0 1 10.411024,11.45866 2.1883047,2.1883047 0 0 1 12.599329,9.2703555 2.1883047,2.1883047 0 0 1 14.787634,11.45866 Z M 0.06631226,-0.01336003 0.06631226,16.100519 16.113879,16.100519\" />\n  </SVGWrapper>\n);\n\nexport const LineChartIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Line Chart</title>\n    <IconPath d=\"M 1.98856,5.3983376 3.9789255,1.5485605 6.8981275,9.2481137 10.215403,6.6815963 15.257662,12.071285 M 0.46261318,0.00862976 0.46261318,15.600225 16.518227,15.600225\" />\n  </SVGWrapper>\n);\n\nexport const HexbinIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Hexbin</title>\n    <IconPath d=\"M 7.6646201,7.248835 10.200286,8.7365914 12.71271,7.2956277 12.71271,4.2993354 10.200286,2.8583717 7.6481891,4.3220885 Z M 2.5260861,7.248835 5.0617524,8.7365914 7.5741798,7.2956277 7.5741798,4.2993354 5.0617524,2.8583717 2.509655,4.3220885 Z M 10.151008,11.430063 12.686686,12.917818 15.199098,11.476854 15.199098,8.4805611 12.686686,7.0395985 10.134577,8.5033165 Z M 5.0124743,11.430063 7.5481406,12.917818 10.060567,11.476854 10.060567,8.4805611 7.5481406,7.0395985 4.9960421,8.5033165 Z M 0.59322509,-0.02976587 0.59322509,16.053058 16.562547,16.008864\" />\n  </SVGWrapper>\n);\n\nexport const BarChartIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Bar Chart</title>\n    <IconPath d=\"M 11.58591,8.3025699 15.255735,8.3025699 15.255735,15.691481 11.58591,15.691481 Z M 6.2401471,3.973457 9.9358173,3.973457 9.9358173,15.626376 6.2401471,15.626376 Z M 0.533269,0.53717705 4.6376139,0.53717705 4.6376139,15.583893 0.533269,15.583893 Z\" />\n  </SVGWrapper>\n);\n\nexport const ParallelCoordinatesIcon = (props: React.SVGAttributes<any>) => (\n  <SVGWrapper width={16} height={16} viewBox=\"0 0 16 16\" outerProps={props}>\n    <title>Parallel Coordinates</title>\n    <IconPath d=\"M 2.7232684,11.593098 8.8105743,9.8309837 14.417303,4.2242547 M 12.356336,0.72968704 15.29192,0.72968704 15.29192,8.4261754 12.356336,8.4261754 Z M 6.8447585,6.4156084 10.103282,6.4156084 10.103282,12.352066 6.8447585,12.352066 Z M 0.51572132,6.0114684 3.9294777,6.0114684 3.9294777,16.25395 0.51572132,16.25395 Z\" />\n  </SVGWrapper>\n);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IconButtonProps {\n  message: string;\n  onClick: () => void;\n  children?: React.ReactNode;\n  title: string;\n  selected: boolean;\n}\nconst baseButtonStyle = `\nwidth: 32px;\nheight: 32px;\ncursor: pointer;\ncolor: var(--theme-app-fg);\n`;\nconst BaseButton = styled.button`\n  ${baseButtonStyle}\n  border: 1px solid var(--theme-app-fg);\n  background-color: var(--theme-app-bg);\n`;\nconst SelectedButton = styled.button`\n  ${baseButtonStyle}\n\n  border: 1px outset #666;\n  background-color: #aaa;\n`;\n\nexport class IconButton extends React.PureComponent<IconButtonProps> {\n  render() {\n    const { message, onClick, children, selected } = this.props;\n\n    const { title = message } = this.props;\n    const WhichButton = selected ? SelectedButton : BaseButton;\n\n    return (\n      <WhichButton onClick={onClick} key={message} title={title}>\n        {children}\n      </WhichButton>\n    );\n  }\n}\n","import { DatabaseOcticon } from \"@nteract/octicons\";\nimport * as React from \"react\";\n\nimport { chartHelpText } from \"../docs/chart-docs\";\nimport {\n  BarChartIcon,\n  BoxplotIcon,\n  HexbinIcon,\n  LineChartIcon,\n  NetworkIcon,\n  ParallelCoordinatesIcon,\n  ScatterplotIcon,\n  TreeIcon\n} from \"../icons\";\n\nimport { View } from \"../types\";\n\nimport { IconButton } from \"./IconButton\";\n\nimport styled from \"styled-components\";\n\ninterface Props {\n  setGrid: () => void;\n  dimensions: object[];\n  setView: (view: View) => void;\n  currentView: string;\n  // How we tell the root DataExplorer to pass toolbar props to this component:\n  componentType: \"toolbar\";\n  largeDataset?: boolean;\n}\n\nconst ToolbarWrapper = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  z-index: 1;\n  padding: 5px;\n`;\n\nToolbar.defaultProps = {\n  componentType: \"toolbar\",\n  currentView: \"\",\n  dimensions: [],\n  setGrid: () => null,\n  setView: () => null\n};\n\nexport function Toolbar({\n  dimensions,\n  setGrid,\n  setView,\n  currentView,\n  componentType,\n  largeDataset\n}: Props) {\n  return (\n    <ToolbarWrapper className=\"dx-button-bar\">\n      <IconButton\n        title={chartHelpText.grid}\n        onClick={setGrid}\n        message={\"Data Table\"}\n        selected={false}\n      >\n        <DatabaseOcticon />\n      </IconButton>\n      {!largeDataset && dimensions.length > 0 && (\n        <IconButton\n          title={chartHelpText.bar}\n          onClick={() => setView(\"bar\")}\n          selected={currentView === \"bar\"}\n          message={\"Bar Graph\"}\n        >\n          <BarChartIcon />\n        </IconButton>\n      )}\n      <IconButton\n        title={chartHelpText.summary}\n        onClick={() => setView(\"summary\")}\n        selected={currentView === \"summary\"}\n        message={\"Summary\"}\n      >\n        <BoxplotIcon />\n      </IconButton>\n      <IconButton\n        title={chartHelpText.scatter}\n        onClick={() => setView(\"scatter\")}\n        selected={currentView === \"scatter\"}\n        message={\"Scatter Plot\"}\n      >\n        <ScatterplotIcon />\n      </IconButton>\n      <IconButton\n        title={chartHelpText.hexbin}\n        onClick={() => setView(\"hexbin\")}\n        selected={currentView === \"hexbin\"}\n        message={\"Area Plot\"}\n      >\n        <HexbinIcon />\n      </IconButton>\n      {!largeDataset && dimensions.length > 1 && (\n        <IconButton\n          title={chartHelpText.network}\n          onClick={() => setView(\"network\")}\n          selected={currentView === \"network\"}\n          message={\"Network\"}\n        >\n          <NetworkIcon />\n        </IconButton>\n      )}\n      {!largeDataset && dimensions.length > 0 && (\n        <IconButton\n          title={chartHelpText.hierarchy}\n          onClick={() => setView(\"hierarchy\")}\n          selected={currentView === \"hierarchy\"}\n          message={\"Hierarchy\"}\n        >\n          <TreeIcon />\n        </IconButton>\n      )}\n      {dimensions.length > 0 && (\n        <IconButton\n          title={chartHelpText.parallel}\n          onClick={() => setView(\"parallel\")}\n          selected={currentView === \"parallel\"}\n          message={\"Parallel Coordinates\"}\n        >\n          <ParallelCoordinatesIcon />\n        </IconButton>\n      )}\n      <IconButton\n        title={chartHelpText.line}\n        onClick={() => setView(\"line\")}\n        selected={currentView === \"line\"}\n        message={\"Line Graph\"}\n      >\n        <LineChartIcon />\n      </IconButton>\n    </ToolbarWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport * as Dx from \"../types\";\n\nconst FlexItem = styled.div`\n  flex: 1;\n  min-width: 0;\n`;\n\ninterface Props {\n  children?: React.ReactNode;\n  // How we tell the root DataExplorer to pass the visual/display as children:\n  componentType?: Dx.ComponentType;\n}\n\nfunction PlaceHolder() {\n  return <div>This should be a display element!</div>;\n}\n\nexport const Viz: React.FunctionComponent<Partial<Props>> = ({\n  children,\n  componentType\n}: Props) => {\n  // In the future, the Viz component might be used for things like error boundaries\n  return <FlexItem>{children}</FlexItem>;\n};\nViz.defaultProps = { componentType: \"viz\", children: <PlaceHolder /> };\nViz.displayName = \"Viz\";\n","export const colors = [\n  \"#DA752E\",\n  \"#E5C209\",\n  \"#1441A0\",\n  \"#B86117\",\n  \"#4D430C\",\n  \"#1DB390\",\n  \"#B3331D\",\n  \"#088EB2\",\n  \"#417505\",\n  \"#E479A8\",\n  \"#F9F39E\",\n  \"#5782DC\",\n  \"#EBA97B\",\n  \"#A2AB60\",\n  \"#B291CF\",\n  \"#8DD2C2\",\n  \"#E6A19F\",\n  \"#3DC7E0\",\n  \"#98CE5B\"\n];\n","import * as React from \"react\";\n\nimport { ChartOptionTypes, controlHelpText } from \"./docs/chart-docs\";\n\nimport styled, { css } from \"styled-components\";\nimport * as Dx from \"./types\";\n\nconst commonCSS = css`\n  h2 {\n    text-transform: capitalize;\n    margin-bottom: 10px;\n  }\n  select {\n    height: 30px;\n  }\n\n  .selected {\n    background-color: #d8e1e8 !important;\n    background-image: none !important;\n  }\n`;\n\nconst ControlWrapper = styled.div`\n  margin-right: 30px;\n  ${commonCSS}\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: left;\n  margin-bottom: 30px;\n  ${commonCSS}\n`;\n\nconst metricDimSelector = (\n  values: string[],\n  selectionFunction: (val: string) => void,\n  title: string,\n  required: boolean,\n  selectedValue: string,\n  contextTooltip = \"Help me help you help yourself\"\n) => {\n  const metricsList = required ? values : [\"none\", ...values];\n  let displayMetrics;\n\n  if (metricsList.length > 1) {\n    displayMetrics = (\n      <select\n        onChange={(event: { target: { value: string } }): void => {\n          selectionFunction(event.target.value);\n        }}\n        value={selectedValue}\n      >\n        {metricsList.map((metricName: string, i) => (\n          <option\n            aria-selected={selectedValue === metricName}\n            key={`display-metric-${i}`}\n            label={metricName}\n            value={metricName}\n          >\n            {metricName}\n          </option>\n        ))}\n      </select>\n    );\n  } else {\n    displayMetrics = <p style={{ margin: 0 }}>{metricsList[0]}</p>;\n  }\n\n  return (\n    <ControlWrapper title={contextTooltip}>\n      <div>\n        <h3>{title}</h3>\n      </div>\n      {displayMetrics}\n    </ControlWrapper>\n  );\n};\n\nconst availableLineTypes: Array<{\n  type: Dx.LineType;\n  label: string;\n}> = [\n  {\n    type: \"line\",\n    label: \"Line Chart\"\n  },\n  {\n    type: \"stackedarea\",\n    label: \"Stacked Area Chart\"\n  },\n  {\n    type: \"stackedpercent\",\n    label: \"Stacked Area Chart (Percent)\"\n  },\n  {\n    type: \"bumparea\",\n    label: \"Ranked Area Chart\"\n  }\n];\n\nconst availableAreaTypes = [\n  {\n    type: \"hexbin\",\n    label: \"Hexbin\"\n  },\n  {\n    type: \"heatmap\",\n    label: \"Heatmap\"\n  },\n  {\n    type: \"contour\",\n    label: \"Contour Plot\"\n  }\n];\n\ntype ChartOptions = { [key in ChartOptionTypes]: string };\ninterface VizControlParams {\n  view: Dx.View;\n  chart: Dx.Chart;\n  metrics: Dx.Field[];\n  dimensions: Dx.Dimension[];\n  // TODO: leave \"options: any\" for now and improve typedef later\n  updateChart: (options: any) => void;\n  selectedDimensions: string[];\n  selectedMetrics: string[];\n  hierarchyType: Dx.HierarchyType;\n  summaryType: Dx.SummaryType;\n  networkType: string;\n  setLineType: (lineType: Dx.LineType) => void;\n  updateMetrics: (name: string) => void;\n  updateDimensions: (name: string) => void;\n  lineType: Dx.LineType;\n  areaType: Dx.AreaType;\n  setAreaType: (label: Dx.AreaType) => void;\n  data: Dx.Datapoint[];\n  trendLine: Dx.TrendLineType;\n  marginalGraphics: Dx.SummaryType;\n  barGrouping: Dx.BarGroupingType;\n}\nexport default ({\n  view,\n  chart,\n  metrics,\n  dimensions,\n  updateChart,\n  selectedDimensions,\n  selectedMetrics,\n  hierarchyType,\n  trendLine,\n  marginalGraphics,\n  barGrouping,\n  summaryType,\n  networkType,\n  setLineType,\n  updateMetrics,\n  updateDimensions,\n  lineType,\n  areaType,\n  setAreaType,\n  data\n}: VizControlParams) => {\n  const metricNames = metrics.map(metric => metric.name);\n  const dimensionNames = dimensions.map(dim => dim.name);\n\n  const updateChartGenerator = (chartProperty: string) => {\n    return (metricOrDim: string) =>\n      updateChart({ chart: { ...chart, [chartProperty]: metricOrDim } });\n  };\n\n  const getControlHelpText = (view: string, metricOrDim: string) => {\n    if (Object.keys(controlHelpText).find(mOrD => mOrD === metricOrDim)) {\n      const mOrD = metricOrDim as ChartOptionTypes;\n      const views =\n        controlHelpText[mOrD] !== undefined ? controlHelpText[mOrD] : null;\n      if (views == null) {\n        return \"\";\n      }\n      if (typeof views === \"string\") {\n        return views;\n      }\n      if (views[view] != null) {\n        return views[view];\n      } else {\n        return views.default;\n      }\n    }\n    return \"\";\n  };\n\n  return (\n    <React.Fragment>\n      <Wrapper>\n        {(view === \"summary\" ||\n          view === \"scatter\" ||\n          view === \"hexbin\" ||\n          view === \"bar\" ||\n          view === \"network\" ||\n          view === \"hierarchy\") &&\n          metricDimSelector(\n            metricNames,\n            updateChartGenerator(\"metric1\"),\n            view === \"scatter\" || view === \"hexbin\" ? \"X\" : \"Metric\",\n            true,\n            chart.metric1,\n            getControlHelpText(view, \"metric1\")\n          )}\n        {(view === \"scatter\" || view === \"hexbin\") &&\n          metricDimSelector(\n            metricNames,\n            updateChartGenerator(\"metric2\"),\n            \"Y\",\n            true,\n            chart.metric2,\n            getControlHelpText(view, \"metric2\")\n          )}\n        {((view === \"scatter\" && data.length < 1000) || view === \"bar\") &&\n          metricDimSelector(\n            metricNames,\n            updateChartGenerator(\"metric3\"),\n            view === \"bar\" ? \"Width\" : \"Size\",\n            false,\n            chart.metric3,\n            getControlHelpText(view, \"metric3\")\n          )}\n        {view === \"bar\" &&\n          metricDimSelector(\n            metricNames,\n            updateChartGenerator(\"metric4\"),\n            \"Error Bars\",\n            false,\n            chart.metric4,\n            getControlHelpText(view, \"metric4\")\n          )}\n        {view === \"bar\" &&\n          metricDimSelector(\n            [\"Clustered\", \"Stacked\"],\n            selectedBarGrouping =>\n              updateChart({ barGrouping: selectedBarGrouping }),\n            \"Stack or Cluster\",\n            true,\n            barGrouping,\n            controlHelpText.barGrouping as string\n          )}\n        {view === \"scatter\" &&\n          metricDimSelector(\n            [\"boxplot\", \"violin\", \"heatmap\", \"ridgeline\", \"histogram\"],\n            selectedMarginalGraphics =>\n              updateChart({ marginalGraphics: selectedMarginalGraphics }),\n            \"Marginal Graphics\",\n            false,\n            marginalGraphics,\n            controlHelpText.marginalGraphics as string\n          )}\n\n        {view === \"scatter\" &&\n          metricDimSelector(\n            [\"linear\", \"polynomial\", \"power\", \"exponential\", \"logarithmic\"],\n            selectedRegressionType =>\n              updateChart({ trendLine: selectedRegressionType }),\n            \"Trendline\",\n            false,\n            trendLine,\n            controlHelpText.trendLine as string\n          )}\n        {(view === \"summary\" ||\n          view === \"scatter\" ||\n          (view === \"hexbin\" && areaType === \"contour\") ||\n          view === \"bar\" ||\n          view === \"parallel\") &&\n          metricDimSelector(\n            dimensionNames,\n            updateChartGenerator(\"dim1\"),\n            view === \"summary\" ? \"Category\" : \"Color\",\n            true,\n            chart.dim1,\n            getControlHelpText(view, \"dim1\")\n          )}\n        {view === \"scatter\" &&\n          metricDimSelector(\n            dimensionNames,\n            updateChartGenerator(\"dim2\"),\n            \"Labels\",\n            false,\n            chart.dim2,\n            getControlHelpText(view, \"dim2\")\n          )}\n        {view === \"hexbin\" &&\n          areaType === \"contour\" &&\n          metricDimSelector(\n            [\"by color\"],\n            updateChartGenerator(\"dim3\"),\n            \"Multiclass\",\n            false,\n            chart.dim3,\n            getControlHelpText(view, \"dim3\")\n          )}\n        {view === \"network\" &&\n          metricDimSelector(\n            dimensionNames,\n            updateChartGenerator(\"dim1\"),\n            \"SOURCE\",\n            true,\n            chart.dim1,\n            getControlHelpText(view, \"dim1\")\n          )}\n        {view === \"network\" &&\n          metricDimSelector(\n            dimensionNames,\n            updateChartGenerator(\"dim2\"),\n            \"TARGET\",\n            true,\n            chart.dim2,\n            getControlHelpText(view, \"dim2\")\n          )}\n        {view === \"network\" &&\n          metricDimSelector(\n            [\"matrix\", \"arc\", \"force\", \"sankey\"],\n            selectedNetworkType =>\n              updateChart({ networkType: selectedNetworkType }),\n            \"Type\",\n            true,\n            networkType,\n            controlHelpText.networkType as string\n          )}\n        {view === \"network\" &&\n          metricDimSelector(\n            [\"static\", \"scaled\"],\n            updateChartGenerator(\"networkLabel\"),\n            \"Show Labels\",\n            false,\n            chart.networkLabel,\n            controlHelpText.networkLabel as string\n          )}\n        {view === \"hierarchy\" &&\n          metricDimSelector(\n            [\"dendrogram\", \"treemap\", \"partition\", \"sunburst\"],\n            selectedHierarchyType =>\n              updateChart({ hierarchyType: selectedHierarchyType }),\n            \"Type\",\n            true,\n            hierarchyType,\n            controlHelpText.hierarchyType as string\n          )}\n        {view === \"summary\" &&\n          metricDimSelector(\n            [\"violin\", \"boxplot\", \"joy\", \"heatmap\", \"histogram\"],\n            selectedSummaryType =>\n              updateChart({ summaryType: selectedSummaryType }),\n            \"Type\",\n            true,\n            summaryType,\n            controlHelpText.summaryType as string\n          )}\n        {view === \"line\" &&\n          metricDimSelector(\n            [\"array-order\", ...metricNames],\n            updateChartGenerator(\"timeseriesSort\"),\n            \"Sort by\",\n            true,\n            chart.timeseriesSort,\n            controlHelpText.timeseriesSort as string\n          )}\n        {view === \"line\" && (\n          <div\n            title={controlHelpText.lineType as string}\n            style={{ display: \"inline-block\" }}\n          >\n            <div>\n              <h3>Chart Type</h3>\n            </div>\n            {availableLineTypes.map(lineTypeOption => (\n              <button\n                key={lineTypeOption.type}\n                className={`button-text ${lineType === lineTypeOption.type &&\n                  \"selected\"}`}\n                onClick={() => setLineType(lineTypeOption.type)}\n              >\n                {lineTypeOption.label}\n              </button>\n            ))}\n          </div>\n        )}\n        {view === \"hexbin\" && (\n          <div\n            className=\"control-wrapper\"\n            title={controlHelpText.areaType as string}\n          >\n            <div>\n              <h3>Chart Type</h3>\n            </div>\n            {availableAreaTypes.map(areaTypeOption => {\n              const areaTypeOptionType = areaTypeOption.type;\n              if (\n                areaTypeOptionType === \"contour\" ||\n                areaTypeOptionType === \"hexbin\" ||\n                areaTypeOptionType === \"heatmap\"\n              ) {\n                return (\n                  <button\n                    className={`button-text ${areaType === areaTypeOptionType &&\n                      \"selected\"}`}\n                    key={areaTypeOptionType}\n                    onClick={() => setAreaType(areaTypeOptionType)}\n                  >\n                    {areaTypeOption.label}\n                  </button>\n                );\n              } else {\n                return <div />;\n              }\n            })}\n          </div>\n        )}\n        {view === \"hierarchy\" && (\n          <div\n            className=\"control-wrapper\"\n            title={controlHelpText.nestingDimensions as string}\n          >\n            <div>\n              <h3>Nesting</h3>\n            </div>\n            {selectedDimensions.length === 0\n              ? \"Select categories to nest\"\n              : `root, ${selectedDimensions.join(\", \")}`}\n          </div>\n        )}\n        {(view === \"bar\" || view === \"hierarchy\") && (\n          <div\n            className=\"control-wrapper\"\n            title={controlHelpText.barDimensions as string}\n          >\n            <div>\n              <h3>Categories</h3>\n            </div>\n            {dimensions.map(dim => (\n              <button\n                key={`dimensions-select-${dim.name}`}\n                className={`button-text ${selectedDimensions.indexOf(\n                  dim.name\n                ) !== -1 && \"selected\"}`}\n                onClick={() => updateDimensions(dim.name)}\n              >\n                {dim.name}\n              </button>\n            ))}\n          </div>\n        )}\n        {view === \"line\" && (\n          <div\n            className=\"control-wrapper\"\n            title={controlHelpText.lineDimensions as string}\n          >\n            <div>\n              <h3>Metrics</h3>\n            </div>\n            {metrics.map(metric => (\n              <button\n                key={`metrics-select-${metric.name}`}\n                className={`button-text ${selectedMetrics.indexOf(\n                  metric.name\n                ) !== -1 && \"selected\"}`}\n                onClick={() => updateMetrics(metric.name)}\n              >\n                {metric.name}\n              </button>\n            ))}\n          </div>\n        )}\n      </Wrapper>\n    </React.Fragment>\n  );\n};\n","export interface ChartOptions {\n  metrics: Metric[];\n  dimensions: Dimension[];\n  chart: Chart;\n  colors: string[];\n  height: number;\n  lineType: LineType;\n  areaType: AreaType;\n  selectedDimensions: string[];\n  selectedMetrics: Metric[];\n  pieceType: PieceType;\n  summaryType: SummaryType;\n  networkType: NetworkType;\n  hierarchyType: HierarchyType;\n  primaryKey: string[];\n  setColor: (color: string[]) => void;\n}\n\nexport interface DataProps {\n  schema: Schema;\n  data: Datapoint[];\n}\n\nexport interface Schema {\n  fields: Field[];\n  pandas_version?: string;\n  primaryKey?: string[];\n}\n\n// If this string is the same as another field name, it would be a problem\n// so it must be unique\nexport const defaultPrimaryKey = \"dx-default-pk\";\nexport interface Field {\n  name: string;\n  type: string;\n}\n\nexport interface Metric extends Field {\n  type: \"integer\" | \"datetime\" | \"number\";\n}\n\nexport interface Dimension extends Field {\n  type: \"string\" | \"boolean\" | \"datetime\";\n  cardinality: number;\n}\n\nexport interface Datapoint {\n  [fieldName: string]: any;\n}\n\nexport interface LineCoordinate {\n  value: number;\n  x: number;\n  label: string;\n  color: string;\n  originalData: Datapoint;\n}\n\nexport interface LineData {\n  color: string;\n  label: string;\n  type: \"number\" | \"integer\" | \"datetime\";\n  coordinates: LineCoordinate[];\n}\n\nexport interface Chart {\n  metric1: string;\n  metric2: string;\n  metric3: string;\n  metric4: string;\n  dim1: string;\n  dim2: string;\n  dim3: string;\n  networkLabel: string;\n  timeseriesSort: string;\n}\nexport type LineType = \"line\" | \"stackedarea\" | \"bumparea\" | \"stackedpercent\";\nexport type AreaType = \"hexbin\" | \"heatmap\" | \"contour\";\n\nexport type BarGroupingType = \"Stacked\" | \"Clustered\";\n\nexport type TrendLineType =\n  | \"none\"\n  | \"linear\"\n  | \"polynomial\"\n  | \"logarithmic\"\n  | \"exponential\"\n  | \"power\";\n\nexport type SummaryType =\n  | \"none\"\n  | \"violin\"\n  | \"joy\"\n  | \"histogram\"\n  | \"heatmap\"\n  | \"boxplot\";\nexport type PieceType = \"bar\" | \"point\" | \"swarm\" | \"clusterbar\";\nexport type HierarchyType = \"dendrogram\" | \"treemap\" | \"partition\" | \"sunburst\";\n\nexport type NetworkType = \"force\" | \"sankey\" | \"arc\" | \"matrix\";\nexport type View =\n  | \"line\"\n  | \"bar\"\n  | \"scatter\"\n  | \"grid\"\n  | \"network\"\n  | \"summary\"\n  | \"hexbin\"\n  | \"parallel\"\n  | \"hierarchy\";\n\nexport type PrimitiveImmutable = string | number | boolean | null;\nexport type JSONType = PrimitiveImmutable | JSONObject | JSONArray;\nexport interface JSONObject {\n  [key: string]: JSONType;\n}\nexport interface JSONArray extends Array<JSONType> {}\n\n/**\n *\n * A custom `data-explorer` component is made up of at least one `viz` component\n * and an optional toolbar. Additional components may be added in the future.\n *\n * The root `data-explorer` uses the following `componentType`'s to determine\n * which props to pass down. If a child component does not have one of these types,\n * it won't be passed any additional props.\n *\n * At the moment, these types are just an implementation detail, but in the future\n * this could be used as a \"public api\" for creating custom components\n * known to `data-explorer`.\n *\n */\nexport type ComponentType = \"viz\" | \"toolbar\";\n","import * as React from \"react\";\n\nimport DataResourceTransformGrid from \"./charts/grid\";\nimport { semioticSettings } from \"./charts/settings\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport { Viz } from \"./components/Viz\";\nimport { colors } from \"./settings\";\nimport VizControls from \"./VizControls\";\n\nexport { DataExplorer, Toolbar, Viz };\n\nconst mediaType: Props[\"mediaType\"] = \"application/vnd.dataresource+json\";\n\nimport styled from \"styled-components\";\nimport * as Dx from \"./types\";\nimport {\n  AreaType,\n  Chart,\n  HierarchyType,\n  LineType,\n  NetworkType,\n  PieceType,\n  SummaryType,\n  View\n} from \"./types\";\n\ninterface dxMetaProps {\n  view?: View;\n  lineType?: LineType;\n  areaType?: AreaType;\n  selectedDimensions?: string[];\n  selectedMetrics?: string[];\n  pieceType?: PieceType;\n  summaryType?: SummaryType;\n  networkType?: NetworkType;\n  hierarchyType?: HierarchyType;\n  trendLine?: Dx.TrendLineType;\n  marginalGraphics?: SummaryType;\n  barGrouping?: Dx.BarGroupingType;\n  colors?: string[];\n  chart?: Chart;\n}\n\ninterface Metadata {\n  dx: dxMetaProps;\n  sampled?: boolean;\n}\n\nexport interface Props {\n  data: Dx.DataProps;\n  metadata: Metadata;\n  theme?: string;\n  expanded?: boolean;\n  height?: number;\n  models?: {};\n  mediaType: \"application/vnd.dataresource+json\";\n  initialView: View;\n  onMetadataChange?: (\n    { dx }: { dx: dxMetaProps },\n    mediaType: Props[\"mediaType\"]\n  ) => void;\n}\n\ninterface State {\n  largeDataset: boolean;\n  view: View;\n  colors: string[];\n  metrics: Dx.Field[];\n  dimensions: Dx.Dimension[];\n  selectedMetrics: string[];\n  selectedDimensions: string[];\n  networkType: NetworkType;\n  hierarchyType: HierarchyType;\n  pieceType: PieceType;\n  summaryType: SummaryType;\n  lineType: LineType;\n  areaType: AreaType;\n  chart: Chart;\n  displayChart: DisplayChart;\n  primaryKey: string[];\n  data: Dx.Datapoint[];\n  trendLine: Dx.TrendLineType;\n  marginalGraphics: Dx.SummaryType;\n  barGrouping: Dx.BarGroupingType;\n}\n\nconst generateChartKey = ({\n  view,\n  lineType,\n  areaType,\n  selectedDimensions,\n  selectedMetrics,\n  pieceType,\n  summaryType,\n  networkType,\n  hierarchyType,\n  trendLine,\n  marginalGraphics,\n  barGrouping,\n  chart\n}: {\n  view: View;\n  lineType: LineType;\n  areaType: AreaType;\n  selectedDimensions: string[];\n  selectedMetrics: string[];\n  pieceType: PieceType;\n  summaryType: SummaryType;\n  networkType: NetworkType;\n  hierarchyType: HierarchyType;\n  trendLine: Dx.TrendLineType;\n  marginalGraphics: SummaryType;\n  barGrouping: Dx.BarGroupingType;\n  chart: Chart;\n}) =>\n  `${view}-${lineType}-${areaType}-${selectedDimensions.join(\n    \",\"\n  )}-${selectedMetrics.join(\n    \",\"\n  )}-${pieceType}-${summaryType}-${networkType}-${hierarchyType}-${trendLine}-${marginalGraphics}-${barGrouping}-${JSON.stringify(\n    chart\n  )}`;\n\ninterface DisplayChart {\n  [chartKey: string]: React.ReactNode;\n}\n/*\n  contour is an option for scatterplot\n  pie is a transform on bar\n*/\n\nconst defaultResponsiveSize = [500, 300];\n\nconst MetadataWarningWrapper = styled.div`\n  & {\n    font-family: Source Sans Pro, Helvetica Neue, Helvetica, Arial, sans-serif;\n  }\n`;\n\nconst MetadataWarningContent = styled.div`\n  & {\n    backgroundcolor: #cce;\n    padding: 10px;\n    paddingleft: 20px;\n  }\n`;\n\nconst MetadataWarning = ({ metadata }: { metadata: Metadata }) => {\n  const warning =\n    metadata && metadata.sampled ? (\n      <span>\n        <b>NOTE:</b> This data is sampled\n      </span>\n    ) : null;\n\n  return (\n    <MetadataWarningWrapper>\n      {warning ? (\n        <MetadataWarningContent>{warning}</MetadataWarningContent>\n      ) : null}\n    </MetadataWarningWrapper>\n  );\n};\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n`;\n\nconst SemioticWrapper = styled.div`\n  width: 100%;\n  .html-legend-item {\n    color: var(--theme-app-fg);\n  }\n\n  .tick > path {\n    stroke: lightgray;\n  }\n\n  .axis-labels,\n  .ordinal-labels {\n    fill: var(--theme-app-fg);\n    font-size: 14px;\n  }\n\n  path.connector,\n  path.connector-end {\n    stroke: var(--theme-app-fg);\n  }\n\n  path.connector-end {\n    fill: var(--theme-app-fg);\n  }\n\n  text.annotation-note-label,\n  text.legend-title,\n  .legend-item text {\n    fill: var(--theme-app-fg);\n    stroke: none;\n  }\n\n  .xyframe-area > path {\n    stroke: var(--theme-app-fg);\n  }\n\n  .axis-baseline {\n    stroke-opacity: 0.25;\n    stroke: var(--theme-app-fg);\n  }\n  circle.frame-hover {\n    fill: none;\n    stroke: gray;\n  }\n  .rect {\n    stroke: green;\n    stroke-width: 5px;\n    stroke-opacity: 0.5;\n  }\n  rect.selection {\n    opacity: 0.5;\n  }\n`;\n\nclass DataExplorer extends React.PureComponent<Partial<Props>, State> {\n  static MIMETYPE: Props[\"mediaType\"] = mediaType;\n\n  static defaultProps = {\n    metadata: {\n      dx: {}\n    },\n    height: 500,\n    mediaType,\n    initialView: \"grid\"\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { metadata, initialView } = props;\n\n    // Handle case of metadata being empty yet dx not set\n    const dx = metadata.dx || {};\n    const chart = dx.chart || {};\n\n    let { fields = [], primaryKey = [] } = props.data.schema;\n    // Provide a default primaryKey if none provided\n    if (primaryKey.length === 0) {\n      primaryKey = [Dx.defaultPrimaryKey];\n      fields = [...fields, { name: Dx.defaultPrimaryKey, type: \"integer\" }];\n    }\n\n    const dimensions = fields\n      .filter(\n        field =>\n          field.type === \"string\" ||\n          field.type === \"boolean\" ||\n          field.type === \"datetime\"\n      )\n      .map(field => ({ ...field, cardinality: 0 })) as Dx.Dimension[];\n\n    // Should datetime data types be transformed into js dates before getting to this resource?\n    const data = props.data.data.map((datapoint, datapointIndex) => {\n      const mappedDatapoint: Dx.Datapoint = {\n        ...datapoint\n      };\n      fields.forEach(field => {\n        if (field.name === Dx.defaultPrimaryKey) {\n          mappedDatapoint[Dx.defaultPrimaryKey] = datapointIndex;\n        }\n        if (field.type === \"datetime\") {\n          mappedDatapoint[field.name] = new Date(mappedDatapoint[field.name]);\n        }\n      });\n      return mappedDatapoint;\n    });\n\n    let largeDataset = true;\n    let selectedDimensions: string[] = [];\n\n    if (data.length < 5000) {\n      largeDataset = false;\n      const cardinalityHash: { [key: string]: { [key: string]: true } } = {};\n      dimensions.forEach(dim => {\n        cardinalityHash[dim.name] = {};\n        data.forEach(datapoint => {\n          const dimValue = datapoint[dim.name];\n          cardinalityHash[dim.name][dimValue] = true;\n        });\n\n        dim.cardinality = Object.entries(cardinalityHash[dim.name]).length;\n      });\n\n      selectedDimensions = dimensions\n        .sort((a, b) => a.cardinality - b.cardinality)\n        .filter((data, index) => index === 0)\n        .map(dim => dim.name);\n    }\n\n    const metrics = fields\n      .filter(\n        field =>\n          field.type === \"integer\" ||\n          field.type === \"number\" ||\n          field.type === \"datetime\"\n      )\n      .filter(\n        field => !primaryKey.find(pkey => pkey === field.name)\n      ) as Dx.Metric[];\n\n    const displayChart: DisplayChart = {};\n    this.state = {\n      largeDataset,\n      view: initialView,\n      lineType: \"line\",\n      areaType: \"hexbin\",\n      trendLine: \"none\",\n      marginalGraphics: \"none\",\n      barGrouping: \"Clustered\",\n      selectedDimensions,\n      selectedMetrics: [],\n      pieceType: \"bar\",\n      summaryType: \"violin\",\n      networkType: \"force\",\n      hierarchyType: \"dendrogram\",\n      dimensions,\n      metrics,\n      colors,\n      // ui: {},\n      chart: {\n        metric1: (metrics[0] && metrics[0].name) || \"none\",\n        metric2: (metrics[1] && metrics[1].name) || \"none\",\n        metric3: \"none\",\n        metric4: \"none\",\n        dim1: (dimensions[0] && dimensions[0].name) || \"none\",\n        dim2: (dimensions[1] && dimensions[1].name) || \"none\",\n        dim3: \"none\",\n        timeseriesSort: \"array-order\",\n        networkLabel: \"none\",\n        ...chart\n      },\n      displayChart,\n      primaryKey,\n      data,\n      ...dx\n    };\n  }\n\n  componentDidMount() {\n    // This is necessary to render any charts based on passed metadata because the grid doesn't result from the updateChart function but any other view does\n    if (this.state.view !== \"grid\") {\n      this.updateChart(this.state);\n    }\n  }\n\n  updateChart = (updatedState: Partial<State>) => {\n    const {\n      view,\n      dimensions,\n      metrics,\n      chart,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      trendLine,\n      marginalGraphics,\n      barGrouping,\n      colors,\n      primaryKey,\n      data: stateData\n    } = { ...this.state, ...updatedState };\n\n    if (!this.props.data && !this.props.metadata && !this.props.initialView) {\n      return;\n    }\n\n    const { data, height } = this.props;\n\n    const { Frame, chartGenerator } = semioticSettings[view];\n\n    const chartKey = generateChartKey({\n      view,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      chart,\n      trendLine,\n      marginalGraphics,\n      barGrouping\n    });\n\n    const frameSettings = chartGenerator(stateData, data!.schema, {\n      metrics,\n      dimensions,\n      chart,\n      colors,\n      height,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      primaryKey,\n      trendLine,\n      marginalGraphics,\n      barGrouping,\n      setColor: this.setColor\n    });\n\n    const display: React.ReactNode = (\n      <SemioticWrapper>\n        <Frame\n          responsiveWidth\n          size={defaultResponsiveSize}\n          {...frameSettings}\n        />\n        <VizControls\n          {...{\n            data: stateData,\n            view,\n            chart,\n            metrics,\n            dimensions,\n            selectedDimensions,\n            selectedMetrics,\n            hierarchyType,\n            summaryType,\n            networkType,\n            trendLine,\n            marginalGraphics,\n            barGrouping,\n            updateChart: this.updateChart,\n            updateDimensions: this.updateDimensions,\n            setLineType: this.setLineType,\n            updateMetrics: this.updateMetrics,\n            lineType,\n            setAreaType: this.setAreaType,\n            areaType\n          }}\n        />\n      </SemioticWrapper>\n    );\n\n    // If you pass an onMetadataChange function, then fire it and pass the updated dx settings so someone upstream can update the metadata or otherwise use it\n\n    this.updateMetadata({\n      view,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      trendLine,\n      marginalGraphics,\n      barGrouping,\n      colors,\n      chart\n    });\n\n    this.setState(\n      (prevState): any => {\n        return {\n          ...updatedState,\n          displayChart: {\n            ...prevState.displayChart,\n            [chartKey]: display\n          }\n        };\n      }\n    );\n  };\n  setView = (view: View) => {\n    this.updateChart({ view });\n  };\n\n  updateMetadata = (overrideProps: object) => {\n    const { onMetadataChange, metadata } = this.props;\n    const {\n      view,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      trendLine,\n      marginalGraphics,\n      barGrouping,\n      colors,\n      chart\n    } = this.state;\n    if (onMetadataChange) {\n      onMetadataChange(\n        {\n          ...metadata,\n          dx: {\n            view,\n            lineType,\n            areaType,\n            selectedDimensions,\n            selectedMetrics,\n            pieceType,\n            summaryType,\n            networkType,\n            hierarchyType,\n            trendLine,\n            marginalGraphics,\n            barGrouping,\n            colors,\n            chart,\n            ...overrideProps\n          }\n        },\n        mediaType\n      );\n    }\n  };\n\n  setGrid = () => {\n    this.updateMetadata({ view: \"grid\" });\n    this.setState({ view: \"grid\" });\n  };\n\n  setColor = (newColorArray: string[]) => {\n    this.updateChart({ colors: newColorArray });\n  };\n\n  setLineType = (selectedLineType: LineType) => {\n    this.updateChart({ lineType: selectedLineType });\n  };\n\n  setAreaType = (selectedAreaType: AreaType) => {\n    this.updateChart({ areaType: selectedAreaType });\n  };\n\n  updateDimensions = (selectedDimension: string) => {\n    const oldDims = this.state.selectedDimensions;\n    const newDimensions =\n      oldDims.indexOf(selectedDimension) === -1\n        ? [...oldDims, selectedDimension]\n        : oldDims.filter(dimension => dimension !== selectedDimension);\n    this.updateChart({ selectedDimensions: newDimensions });\n  };\n  updateMetrics = (selectedMetric: string) => {\n    const oldMetrics = this.state.selectedMetrics;\n    const newMetrics =\n      oldMetrics.indexOf(selectedMetric) === -1\n        ? [...oldMetrics, selectedMetric]\n        : oldMetrics.filter(metric => metric !== selectedMetric);\n    this.updateChart({ selectedMetrics: newMetrics });\n  };\n\n  render() {\n    const {\n      view,\n      dimensions,\n      chart,\n      lineType,\n      areaType,\n      selectedDimensions,\n      selectedMetrics,\n      pieceType,\n      summaryType,\n      networkType,\n      hierarchyType,\n      trendLine,\n      marginalGraphics,\n      barGrouping,\n      largeDataset\n    } = this.state;\n\n    let display: React.ReactNode = null;\n\n    if (view === \"grid\") {\n      display = <DataResourceTransformGrid {...this.props as Props} />;\n    } else if (\n      [\n        \"line\",\n        \"scatter\",\n        \"bar\",\n        \"network\",\n        \"summary\",\n        \"hierarchy\",\n        \"hexbin\",\n        \"parallel\"\n      ].includes(view)\n    ) {\n      const chartKey = generateChartKey({\n        view,\n        lineType,\n        areaType,\n        selectedDimensions,\n        selectedMetrics,\n        pieceType,\n        summaryType,\n        networkType,\n        hierarchyType,\n        chart,\n        trendLine,\n        marginalGraphics,\n        barGrouping\n      });\n\n      display = this.state.displayChart[chartKey];\n    }\n    const children = React.Children.map(this.props.children, child => {\n      if (!React.isValidElement(child)) {\n        return;\n      }\n      const { componentType } = child.props as any;\n      if (componentType === \"viz\") {\n        const newProps = { children: display };\n        return React.cloneElement(child, newProps);\n      } else if (componentType === \"toolbar\") {\n        const toolbarProps = {\n          dimensions,\n          currentView: view,\n          setGrid: this.setGrid,\n          setView: this.setView,\n          largeDataset\n        };\n        return React.cloneElement(child, toolbarProps);\n      }\n\n      return child;\n    });\n\n    return (\n      <div>\n        <MetadataWarning metadata={this.props.metadata!} />\n        <FlexWrapper>{children}</FlexWrapper>\n      </div>\n    );\n  }\n}\n\nconst DataExplorerDefault: React.FunctionComponent<Props> & {\n  MIMETYPE: Props[\"mediaType\"];\n} = (props: Partial<Props>) => {\n  return (\n    <DataExplorer {...props}>\n      <Viz />\n      <Toolbar />\n    </DataExplorer>\n  );\n};\n\nDataExplorerDefault.defaultProps = {\n  mediaType\n};\nDataExplorerDefault.displayName = \"DataExplorerDefault\";\n\n// For the jupyter extension to load MIMETYPE must be present.\nDataExplorerDefault.MIMETYPE = mediaType;\n\nexport default DataExplorerDefault;\n"],"sourceRoot":""}